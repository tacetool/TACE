SYMCC_OUTPUT_DIR=output
SYMCC_INPUT_FILE=basename_t.input
SYMCC_LOG_FILE=file_input.log
This is SymCC running with the QSYM backend
Making data read from basename_t.input as symbolic
Reading 8 bytes from address 0x7ffc7939f890
Known regions:
Reading 4 bytes from address 0x7ffc7939f754
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
Writing 4 bytes to address 0x7ffc7939f754
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
Writing 4 bytes to address 0x7ffc7939f75c
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
Reading 4 bytes from address 0x7ffc7939f75c
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
Reading 8 bytes from address 0x405100
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
All is good.
Reading 4 bytes from address 0x7ffc7939f754
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
[INFO] 
Push Path Constrain: {
Slt(0x29, Read(index=0) | Read(index=1) | Read(index=2) | Read(index=3))
}
[STAT] SMT: { "solving_time": 0, "total_time": 40973 }
[STAT] SMT: { "solving_time": 1418 }
[STAT] SMT: { "solving_time": 1418, "total_time": 42916 }
[STAT] SMT: { "solving_time": 2304 }
[DEBUG] 
Solver Model: {; 
(set-info :status unknown)
(declare-fun k!30 () (_ BitVec 8))
(declare-fun k!20 () (_ BitVec 8))
(declare-fun k!10 () (_ BitVec 8))
(declare-fun k!00 () (_ BitVec 8))
(assert
 (not (bvsle (concat k!00 k!10 k!20 k!30) (_ bv41 32))))
(check-sat)

}
[INFO] New testcase: output/000000
[INFO] Before subsumption: Read(index=0) | Read(index=1) | Read(index=2) | Read(index=3)
[INFO] After subsumption: Read(index=0) | Read(index=1) | Read(index=2) | Read(index=3)
	 signed:{ [-2147483648, 41] }
Reading 8 bytes from address 0x405100
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
Not sure this is correct...
Reading 4 bytes from address 0x7ffc7939f760
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
[INFO] 
Push Path Constrain: {
Equal(0x61616161, Read(index=7) | Read(index=6) | Read(index=5) | Read(index=4))
}
[STAT] SMT: { "solving_time": 2304, "total_time": 64422 }
[STAT] SMT: { "solving_time": 3446 }
[STAT] SMT: { "solving_time": 3446, "total_time": 66034 }
[STAT] SMT: { "solving_time": 4469 }
[DEBUG] 
Solver Model: {; 
(set-info :status unknown)
(declare-fun k!70 () (_ BitVec 8))
(declare-fun k!60 () (_ BitVec 8))
(declare-fun k!50 () (_ BitVec 8))
(declare-fun k!40 () (_ BitVec 8))
(assert
 (let (($x21 (and (= k!40 (_ bv97 8)) (= k!50 (_ bv97 8)) (= k!60 (_ bv97 8)) (= k!70 (_ bv97 8)))))
 (not $x21)))
(check-sat)

}
[INFO] New testcase: output/000001
[INFO] Before subsumption: Read(index=7) | Read(index=6) | Read(index=5) | Read(index=4)
[INFO] After subsumption: Read(index=7) | Read(index=6) | Read(index=5) | Read(index=4)
	 signed:{ [1633771873, 1633771873] }
Reading 8 bytes from address 0x405100
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
No.
Reading 8 bytes from address 0x7ffc7939f890
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
Warning: input file opened multiple times; this is not yet supported
Reading 4 bytes from address 0x7ffc7939f758
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
Writing 4 bytes to address 0x7ffc7939f758
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
[INFO] 
Push Path Constrain: {
Equal(0x5000000, Read(index=3) | Read(index=2) | Read(index=1) | Read(index=0))
}
[STAT] SMT: { "solving_time": 4469, "total_time": 94457 }
[STAT] SMT: { "solving_time": 5610 }
[STAT] SMT: { "solving_time": 5610, "total_time": 96016 }
[STAT] SMT: { "solving_time": 6664 }
[DEBUG] 
Solver Model: {; 
(set-info :status unknown)
(declare-fun k!30 () (_ BitVec 8))
(declare-fun k!20 () (_ BitVec 8))
(declare-fun k!10 () (_ BitVec 8))
(declare-fun k!00 () (_ BitVec 8))
(assert
 (let ((?x16 (concat k!00 k!10 k!20 k!30)))
 (bvsle ?x16 (_ bv41 32))))
(assert
 (let (($x70 (and (= k!00 (_ bv0 8)) (= k!10 (_ bv0 8)) (= k!20 (_ bv0 8)) (= k!30 (_ bv5 8)))))
 (not $x70)))
(check-sat)

}
[INFO] New testcase: output/000002
[INFO] Before subsumption: Read(index=3) | Read(index=2) | Read(index=1) | Read(index=0)
[INFO] After subsumption: Read(index=3) | Read(index=2) | Read(index=1) | Read(index=0)
	 signed:{ [83886080, 83886080] }
Reading 8 bytes from address 0x405100
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
Yep, it's the test input.
Reading 4 bytes from address 0x7ffc7939f764
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
[INFO] 
Push Path Constrain: {
Equal(0x61616161, Read(index=7) | Read(index=6) | Read(index=5) | Read(index=4))
}
[STAT] SMT: { "solving_time": 6664, "total_time": 114301 }
[STAT] SMT: { "solving_time": 7637 }
[STAT] SMT: { "solving_time": 7637, "total_time": 115719 }
[STAT] SMT: { "solving_time": 8277 }
[DEBUG] unsat
[STAT] SMT: { "solving_time": 8277, "total_time": 117449 }
[STAT] SMT: { "solving_time": 9257 }
[DEBUG] 
Solver Model: {; 
(set-info :status unknown)
(declare-fun k!70 () (_ BitVec 8))
(declare-fun k!60 () (_ BitVec 8))
(declare-fun k!50 () (_ BitVec 8))
(declare-fun k!40 () (_ BitVec 8))
(assert
 (let (($x17 (and (= k!40 (_ bv97 8)) (= k!50 (_ bv97 8)) (= k!60 (_ bv97 8)) (= k!70 (_ bv97 8)))))
 (not $x17)))
(check-sat)

}
[INFO] New testcase: output/000003-optimistic
[INFO] Before subsumption: Read(index=7) | Read(index=6) | Read(index=5) | Read(index=4)
	 signed:{ [1633771873, 1633771873] }
[INFO] After subsumption: Read(index=7) | Read(index=6) | Read(index=5) | Read(index=4)
	 signed:{ [1633771873, 1633771873] }
Reading 8 bytes from address 0x405100
Known regions:
  0x7ffc7939f000 shadowed by 0x20da5b0
Still the test input.
