SYMCC_OUTPUT_DIR=sanjay1_loop
SYMCC_INPUT_FILE=sanjay1_loop/000003
This is SymCC running with the QSYM backend
Making data read from sanjay1_loop/000003 as symbolic
Writing 4 bytes to address 0x7ffd072e64bc
Known regions:
Writing 4 bytes to address 0x7ffd072e64b8
Known regions:
Writing 8 bytes to address 0x7ffd072e64b0
Known regions:
Reading 8 bytes from address 0x7ffd072e64b0
Known regions:
Reading 8 bytes from address 0x7ffd072e65c0
Known regions:
Writing 8 bytes to address 0x7ffd072e64a8
Known regions:
Writing 4 bytes to address 0x7ffd072e5cc8
Known regions:
Reading 8 bytes from address 0x7ffd072e64a8
Known regions:
Writing 8 bytes to address 0x7ffd072e5cb8
Known regions:
Reading 8 bytes from address 0x7ffd072e5cb8
Known regions:
Reading 8 bytes from address 0x7ffd072e5cb8
Known regions:
Writing 4 bytes to address 0x7ffd072e5ccc
Known regions:
Reading 8 bytes from address 0x7ffd072e5cb8
Known regions:
Reading 4 bytes from address 0x7ffd072e5ccc
Known regions:
Reading 8 bytes from address 0x7ffd072e5cb8
Known regions:
[registerExpression] :: Read[0x2228a90, isConcrete=false]::(index=0, bits=8)
[INFO] 
Get Read SymExpr from input by offset 0: {
	Read[0x2228a90, isConcrete=false]::(index=0, bits=8)
}
[registerExpression] :: Read[0x2242b40, isConcrete=false]::(index=1, bits=8)
[INFO] 
Get Read SymExpr from input by offset 1: {
	Read[0x2242b40, isConcrete=false]::(index=1, bits=8)
}
[registerExpression] :: Read[0x2242c80, isConcrete=false]::(index=2, bits=8)
[INFO] 
Get Read SymExpr from input by offset 2: {
	Read[0x2242c80, isConcrete=false]::(index=2, bits=8)
}
[registerExpression] :: Read[0x2242d80, isConcrete=false]::(index=3, bits=8)
[INFO] 
Get Read SymExpr from input by offset 3: {
	Read[0x2242d80, isConcrete=false]::(index=3, bits=8)
}
[registerExpression] :: Read[0x2242f80, isConcrete=false]::(index=4, bits=8)
[INFO] 
Get Read SymExpr from input by offset 4: {
	Read[0x2242f80, isConcrete=false]::(index=4, bits=8)
}
[registerExpression] :: Read[0x22430f0, isConcrete=false]::(index=5, bits=8)
[INFO] 
Get Read SymExpr from input by offset 5: {
	Read[0x22430f0, isConcrete=false]::(index=5, bits=8)
}
[registerExpression] :: Read[0x2243260, isConcrete=false]::(index=6, bits=8)
[INFO] 
Get Read SymExpr from input by offset 6: {
	Read[0x2243260, isConcrete=false]::(index=6, bits=8)
}
[registerExpression] :: Read[0x22433d0, isConcrete=false]::(index=7, bits=8)
[INFO] 
Get Read SymExpr from input by offset 7: {
	Read[0x22433d0, isConcrete=false]::(index=7, bits=8)
}
[registerExpression] :: Read[0x229b600, isConcrete=false]::(index=8, bits=8)
[INFO] 
Get Read SymExpr from input by offset 8: {
	Read[0x229b600, isConcrete=false]::(index=8, bits=8)
}
[registerExpression] :: Read[0x229b740, isConcrete=false]::(index=9, bits=8)
[INFO] 
Get Read SymExpr from input by offset 9: {
	Read[0x229b740, isConcrete=false]::(index=9, bits=8)
}
[registerExpression] :: Read[0x229b880, isConcrete=false]::(index=a, bits=8)
[INFO] 
Get Read SymExpr from input by offset 10: {
	Read[0x229b880, isConcrete=false]::(index=a, bits=8)
}
[registerExpression] :: Read[0x229b9f0, isConcrete=false]::(index=b, bits=8)
[INFO] 
Get Read SymExpr from input by offset 11: {
	Read[0x229b9f0, isConcrete=false]::(index=b, bits=8)
}
[registerExpression] :: Read[0x229bb60, isConcrete=false]::(index=c, bits=8)
[INFO] 
Get Read SymExpr from input by offset 12: {
	Read[0x229bb60, isConcrete=false]::(index=c, bits=8)
}
[registerExpression] :: Read[0x229bcd0, isConcrete=false]::(index=d, bits=8)
[INFO] 
Get Read SymExpr from input by offset 13: {
	Read[0x229bcd0, isConcrete=false]::(index=d, bits=8)
}
[registerExpression] :: Read[0x229be40, isConcrete=false]::(index=e, bits=8)
[INFO] 
Get Read SymExpr from input by offset 14: {
	Read[0x229be40, isConcrete=false]::(index=e, bits=8)
}
[registerExpression] :: Read[0x229bfb0, isConcrete=false]::(index=f, bits=8)
[INFO] 
Get Read SymExpr from input by offset 15: {
	Read[0x229bfb0, isConcrete=false]::(index=f, bits=8)
}
[registerExpression] :: Read[0x229c120, isConcrete=false]::(index=10, bits=8)
[INFO] 
Get Read SymExpr from input by offset 16: {
	Read[0x229c120, isConcrete=false]::(index=10, bits=8)
}
[registerExpression] :: Read[0x229c290, isConcrete=false]::(index=11, bits=8)
[INFO] 
Get Read SymExpr from input by offset 17: {
	Read[0x229c290, isConcrete=false]::(index=11, bits=8)
}
[registerExpression] :: Read[0x229c400, isConcrete=false]::(index=12, bits=8)
[INFO] 
Get Read SymExpr from input by offset 18: {
	Read[0x229c400, isConcrete=false]::(index=12, bits=8)
}
[registerExpression] :: Read[0x229c570, isConcrete=false]::(index=13, bits=8)
[INFO] 
Get Read SymExpr from input by offset 19: {
	Read[0x229c570, isConcrete=false]::(index=13, bits=8)
}
[registerExpression] :: Read[0x229c6e0, isConcrete=false]::(index=14, bits=8)
[INFO] 
Get Read SymExpr from input by offset 20: {
	Read[0x229c6e0, isConcrete=false]::(index=14, bits=8)
}
[registerExpression] :: Read[0x229c850, isConcrete=false]::(index=15, bits=8)
[INFO] 
Get Read SymExpr from input by offset 21: {
	Read[0x229c850, isConcrete=false]::(index=15, bits=8)
}
[registerExpression] :: Read[0x229c9c0, isConcrete=false]::(index=16, bits=8)
[INFO] 
Get Read SymExpr from input by offset 22: {
	Read[0x229c9c0, isConcrete=false]::(index=16, bits=8)
}
[registerExpression] :: Read[0x229cb30, isConcrete=false]::(index=17, bits=8)
[INFO] 
Get Read SymExpr from input by offset 23: {
	Read[0x229cb30, isConcrete=false]::(index=17, bits=8)
}
[registerExpression] :: Read[0x229cca0, isConcrete=false]::(index=18, bits=8)
[INFO] 
Get Read SymExpr from input by offset 24: {
	Read[0x229cca0, isConcrete=false]::(index=18, bits=8)
}
[registerExpression] :: Read[0x229ce10, isConcrete=false]::(index=19, bits=8)
[INFO] 
Get Read SymExpr from input by offset 25: {
	Read[0x229ce10, isConcrete=false]::(index=19, bits=8)
}
[registerExpression] :: Read[0x229cf80, isConcrete=false]::(index=1a, bits=8)
[INFO] 
Get Read SymExpr from input by offset 26: {
	Read[0x229cf80, isConcrete=false]::(index=1a, bits=8)
}
[registerExpression] :: Read[0x229d0f0, isConcrete=false]::(index=1b, bits=8)
[INFO] 
Get Read SymExpr from input by offset 27: {
	Read[0x229d0f0, isConcrete=false]::(index=1b, bits=8)
}
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd0
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x2237d70, addChild = [ Read[0x2228a90, isConcrete=false]::(index=0, bits=8) ]
[registerExpression] :: SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd1
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x2237cc0, addChild = [ Read[0x2242b40, isConcrete=false]::(index=1, bits=8) ]
[registerExpression] :: SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))
[Expr::addChild]  this = 0x22378a0, addChild = [ SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8)) ]
[Expr::addChild]  this = 0x22378a0, addChild = [ SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8)) ]
[registerExpression] :: Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8)))
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd3
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22351d0, addChild = [ Read[0x2242d80, isConcrete=false]::(index=3, bits=8) ]
[registerExpression] :: SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x2234b10, addChild = [ Read[0x2242f80, isConcrete=false]::(index=4, bits=8) ]
[registerExpression] :: SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))
[Expr::addChild]  this = 0x2214c70, addChild = [ SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8)) ]
[Expr::addChild]  this = 0x2214c70, addChild = [ SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)) ]
[registerExpression] :: Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd5
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x229d830, addChild = [ Read[0x22430f0, isConcrete=false]::(index=5, bits=8) ]
[registerExpression] :: SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))
[Expr::addChild]  this = 0x229d9d0, addChild = [ SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)) ]
[Expr::addChild]  this = 0x229d9d0, addChild = [ Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) ]
[registerExpression] :: Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))
[Expr::addChild]  this = 0x229db80, addChild = [ Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) ]
[Expr::addChild]  this = 0x229db80, addChild = [ Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))) ]
[registerExpression] :: Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))))

Push Path Constrain 0x229db80 : {
	Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))))
}

====================== Start negating path for the pushed constraint =============================
Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))))
====================== Start negating path for the pushed constraint =============================


[Solver::addJcc] isInteresting=true
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x229db80 [
	Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))))
] with Symbolic Dependencies = [ 0 1 3 4 5  ]
[DepForest] Trying to find or create DepTree for index=0
[DepForest] Trying to find or create DepTree for index=1
[DepForest] Trying to find or create DepTree for index=3
[DepForest] Trying to find or create DepTree for index=4
[DepForest] Trying to find or create DepTree for index=5



FOR TREE 0x221dc00 :: SYMDEP [ ], CONCRETE DEP [ ]



FOR TREE 0x2228370 :: SYMDEP [ ], CONCRETE DEP [ ]



FOR TREE 0x222f870 :: SYMDEP [ ], CONCRETE DEP [ ]



FOR TREE 0x22347a0 :: SYMDEP [ ], CONCRETE DEP [ ]



FOR TREE 0x2237950 :: SYMDEP [ ], CONCRETE DEP [ ]

[Expr::addChild]  this = 0x229f460, addChild = [ Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) ]
[STAT] SMT: {"solving_time_elapsed": 3730 }
[DEBUG] 
Solver Model z3::sat :: {; 
(set-info :status unknown)
(declare-fun k!10 () (_ BitVec 8))
(declare-fun k!00 () (_ BitVec 8))
(declare-fun k!40 () (_ BitVec 8))
(declare-fun k!30 () (_ BitVec 8))
(declare-fun k!50 () (_ BitVec 8))
(assert
 (let ((?x27 ((_ extract 7 7) k!10)))
 (let ((?x28 (concat ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 k!10)))
 (let ((?x25 ((_ extract 7 7) k!00)))
 (let ((?x26 (concat ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 k!00)))
 (let ((?x14 ((_ extract 7 7) k!40)))
 (let ((?x29 (concat ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 k!40)))
 (let ((?x12 ((_ extract 7 7) k!30)))
 (let ((?x13 (concat ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 ?x12 k!30)))
 (let ((?x10 ((_ extract 7 7) k!50)))
 (let ((?x11 (concat ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 ?x10 k!50)))
 (bvsle (bvadd ?x11 ?x13 ?x29) (bvadd ?x26 ?x28)))))))))))))
(check-sat)

}
[INFO] New testcase: sanjay1_loop/000000
[QSYM::Solver] Add Constraint 0x229db80 :: [ Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) ] into DepForest=0x221d668
[DepForest] Trying to find or create DepTree for index=0
[DepForest] Trying to find or create DepTree for index=1
[DepForest] Trying to find or create DepTree for index=3
[DepForest] Trying to find or create DepTree for index=4
[DepForest] Trying to find or create DepTree for index=5
[DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
	]
	set = [ 0 1 3 4 5 ]
]
[Solver::addJcc] DepForest after negating path and adding constraint to the solver:
================== [DepForest] This=0x221d668,size=6 : [
ForestTreeIdx=0 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
	]
	set = [ 0 1 3 4 5 ]
]
ForestTreeIdx=1 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
	]
	set = [ 0 1 3 4 5 ]
]
ForestTreeIdx=2 DT=0
ForestTreeIdx=3 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
	]
	set = [ 0 1 3 4 5 ]
]
ForestTreeIdx=4 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
	]
	set = [ 0 1 3 4 5 ]
]
ForestTreeIdx=5 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
	]
	set = [ 0 1 3 4 5 ]
]
]
====================== FOREST STATISTICS =========================
 Unique Trees        : 1
 Allocated Trees     : 6
 Sparse Idx          : 0.166667
 Forest Dependencies : 5 [ 0 1 3 4 5 ]
==================================================================
====================== End negating path for the pushed constraint =============================
Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))))
====================== End negating path for the pushed constraint =============================


===================== ALLOCATED EXPRESSIONS STATS : 37 =====================
IDX=0 :: Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) :: DepsSize=2 [ 3 4 ]
IDX=1 :: Read[0x2228a90, isConcrete=false]::(index=0, bits=8) :: DepsSize=1 [ 0 ]
IDX=2 :: SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)) :: DepsSize=1 [ 4 ]
IDX=3 :: SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8)) :: DepsSize=1 [ 3 ]
IDX=4 :: Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) :: DepsSize=2 [ 0 1 ]
IDX=5 :: SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8)) :: DepsSize=1 [ 1 ]
IDX=6 :: SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8)) :: DepsSize=1 [ 0 ]
IDX=7 :: Read[0x2242b40, isConcrete=false]::(index=1, bits=8) :: DepsSize=1 [ 1 ]
IDX=8 :: Read[0x2242c80, isConcrete=false]::(index=2, bits=8) :: DepsSize=1 [ 2 ]
IDX=9 :: Read[0x2242d80, isConcrete=false]::(index=3, bits=8) :: DepsSize=1 [ 3 ]
IDX=10 :: Read[0x2242f80, isConcrete=false]::(index=4, bits=8) :: DepsSize=1 [ 4 ]
IDX=11 :: Read[0x22430f0, isConcrete=false]::(index=5, bits=8) :: DepsSize=1 [ 5 ]
IDX=12 :: Read[0x2243260, isConcrete=false]::(index=6, bits=8) :: DepsSize=1 [ 6 ]
IDX=13 :: Read[0x22433d0, isConcrete=false]::(index=7, bits=8) :: DepsSize=1 [ 7 ]
IDX=14 :: Read[0x229b600, isConcrete=false]::(index=8, bits=8) :: DepsSize=1 [ 8 ]
IDX=15 :: Read[0x229b740, isConcrete=false]::(index=9, bits=8) :: DepsSize=1 [ 9 ]
IDX=16 :: Read[0x229b880, isConcrete=false]::(index=a, bits=8) :: DepsSize=1 [ 10 ]
IDX=17 :: Read[0x229b9f0, isConcrete=false]::(index=b, bits=8) :: DepsSize=1 [ 11 ]
IDX=18 :: Read[0x229bb60, isConcrete=false]::(index=c, bits=8) :: DepsSize=1 [ 12 ]
IDX=19 :: Read[0x229bcd0, isConcrete=false]::(index=d, bits=8) :: DepsSize=1 [ 13 ]
IDX=20 :: Read[0x229be40, isConcrete=false]::(index=e, bits=8) :: DepsSize=1 [ 14 ]
IDX=21 :: Read[0x229bfb0, isConcrete=false]::(index=f, bits=8) :: DepsSize=1 [ 15 ]
IDX=22 :: Read[0x229c120, isConcrete=false]::(index=10, bits=8) :: DepsSize=1 [ 16 ]
IDX=23 :: Read[0x229c290, isConcrete=false]::(index=11, bits=8) :: DepsSize=1 [ 17 ]
IDX=24 :: Read[0x229c400, isConcrete=false]::(index=12, bits=8) :: DepsSize=1 [ 18 ]
IDX=25 :: Read[0x229c570, isConcrete=false]::(index=13, bits=8) :: DepsSize=1 [ 19 ]
IDX=26 :: Read[0x229c6e0, isConcrete=false]::(index=14, bits=8) :: DepsSize=1 [ 20 ]
IDX=27 :: Read[0x229c850, isConcrete=false]::(index=15, bits=8) :: DepsSize=1 [ 21 ]
IDX=28 :: Read[0x229c9c0, isConcrete=false]::(index=16, bits=8) :: DepsSize=1 [ 22 ]
IDX=29 :: Read[0x229cb30, isConcrete=false]::(index=17, bits=8) :: DepsSize=1 [ 23 ]
IDX=30 :: Read[0x229cca0, isConcrete=false]::(index=18, bits=8) :: DepsSize=1 [ 24 ]
IDX=31 :: Read[0x229ce10, isConcrete=false]::(index=19, bits=8) :: DepsSize=1 [ 25 ]
IDX=32 :: Read[0x229cf80, isConcrete=false]::(index=1a, bits=8) :: DepsSize=1 [ 26 ]
IDX=33 :: Read[0x229d0f0, isConcrete=false]::(index=1b, bits=8) :: DepsSize=1 [ 27 ]
IDX=34 :: SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)) :: DepsSize=1 [ 5 ]
IDX=35 :: Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))) :: DepsSize=3 [ 3 4 5 ]
IDX=36 :: Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: DepsSize=5 [ 0 1 3 4 5 ]
===================== ALLOCATED EXPRESSIONS STATS =====================

Reading 4 bytes from address 0x7ffd072e5cc8
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Writing 4 bytes to address 0x7ffd072e5cc8
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Writing 4 bytes to address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd1
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22d5420, addChild = [ Read[0x2242b40, isConcrete=false]::(index=1, bits=8) ]
[registerExpression] :: SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd2
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22ed760, addChild = [ Read[0x2242c80, isConcrete=false]::(index=2, bits=8) ]
[registerExpression] :: SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))
[Expr::addChild]  this = 0x22a5ba0, addChild = [ SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8)) ]
[Expr::addChild]  this = 0x22a5ba0, addChild = [ SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8)) ]
[registerExpression] :: Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8)))
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22a65e0, addChild = [ Read[0x2242f80, isConcrete=false]::(index=4, bits=8) ]
[registerExpression] :: SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd5
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22a5380, addChild = [ Read[0x22430f0, isConcrete=false]::(index=5, bits=8) ]
[registerExpression] :: SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))
[Expr::addChild]  this = 0x22bd4c0, addChild = [ SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)) ]
[Expr::addChild]  this = 0x22bd4c0, addChild = [ SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)) ]
[registerExpression] :: Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd6
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22b8a40, addChild = [ Read[0x2243260, isConcrete=false]::(index=6, bits=8) ]
[registerExpression] :: SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))
[Expr::addChild]  this = 0x22ab320, addChild = [ SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8)) ]
[Expr::addChild]  this = 0x22ab320, addChild = [ Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) ]
[registerExpression] :: Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))
[Expr::addChild]  this = 0x22aaa00, addChild = [ Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) ]
[Expr::addChild]  this = 0x22aaa00, addChild = [ Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) ]
[registerExpression] :: Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))))

Push Path Constrain 0x22aaa00 : {
	Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))))
}

====================== Start negating path for the pushed constraint =============================
Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))))
====================== Start negating path for the pushed constraint =============================


[Solver::addJcc] isInteresting=true
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22aaa00 [
	Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))))
] with Symbolic Dependencies = [ 1 2 4 5 6  ]
[DepForest] Trying to find or create DepTree for index=1
[DepForest] Trying to find or create DepTree for index=2
[DepForest] Trying to find or create DepTree for index=4
[DepForest] Trying to find or create DepTree for index=5
[DepForest] Trying to find or create DepTree for index=6



FOR TREE 0x2237950 :: SYMDEP [ 1 4 5 ], CONCRETE DEP [ 0 3 ]

[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x229db80 [
	Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=false]::(bits=32, Read[0x2228a90, isConcrete=false]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))))
] with Dependencies = [ 0 1 3 4 5  ]


FOR TREE 0x22ecea0 :: SYMDEP [ 1 4 5 ], CONCRETE DEP [ 0 3 ]



FOR TREE 0x22f6240 :: SYMDEP [ 1 4 5 ], CONCRETE DEP [ 0 3 ]

[Expr::addChild]  this = 0x22dffc0, addChild = [ Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) ]
[STAT] SMT: {"solving_time_elapsed": 4824 }
[DEBUG] 
Solver Model z3::sat :: {; 
(set-info :status unknown)
(declare-fun k!10 () (_ BitVec 8))
(declare-fun k!40 () (_ BitVec 8))
(declare-fun k!50 () (_ BitVec 8))
(declare-fun k!20 () (_ BitVec 8))
(declare-fun k!60 () (_ BitVec 8))
(assert
 (let ((?x14 ((_ extract 7 7) k!10)))
 (let ((?x29 (concat ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 k!10)))
 (let ((?x27 ((_ extract 7 7) k!40)))
 (let ((?x28 (concat ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 k!40)))
 (let ((?x25 ((_ extract 7 7) k!50)))
 (let ((?x26 (concat ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 k!50)))
 (not (bvsle (bvadd (_ bv66 32) ?x26 ?x28) (bvadd (_ bv66 32) ?x29))))))))))
(assert
 (let ((?x335 ((_ extract 7 7) k!20)))
 (let ((?x38 (concat ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 k!20)))
 (let ((?x14 ((_ extract 7 7) k!10)))
 (let ((?x29 (concat ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 ?x14 k!10)))
 (let ((?x25 ((_ extract 7 7) k!50)))
 (let ((?x26 (concat ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 ?x25 k!50)))
 (let ((?x27 ((_ extract 7 7) k!40)))
 (let ((?x28 (concat ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 ?x27 k!40)))
 (let ((?x40 ((_ extract 7 7) k!60)))
 (let ((?x334 (concat ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 k!60)))
 (bvsle (bvadd ?x334 ?x28 ?x26) (bvadd ?x29 ?x38)))))))))))))
(check-sat)

}
[INFO] New testcase: sanjay1_loop/000001
[QSYM::Solver] Add Constraint 0x22aaa00 :: [ Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) ] into DepForest=0x221d668
[DepForest] Trying to find or create DepTree for index=1
[DepForest] Trying to find or create DepTree for index=2
[DepForest] Trying to find or create DepTree for index=4
[DepForest] Trying to find or create DepTree for index=5
[DepForest] Trying to find or create DepTree for index=6
[DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
	]
	set = [ 0 1 2 3 4 5 6 ]
]
[Solver::addJcc] DepForest after negating path and adding constraint to the solver:
================== [DepForest] This=0x221d668,size=7 : [
ForestTreeIdx=0 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
	]
	set = [ 0 1 2 3 4 5 6 ]
]
ForestTreeIdx=1 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
	]
	set = [ 0 1 2 3 4 5 6 ]
]
ForestTreeIdx=2 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
	]
	set = [ 0 1 2 3 4 5 6 ]
]
ForestTreeIdx=3 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
	]
	set = [ 0 1 2 3 4 5 6 ]
]
ForestTreeIdx=4 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
	]
	set = [ 0 1 2 3 4 5 6 ]
]
ForestTreeIdx=5 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
	]
	set = [ 0 1 2 3 4 5 6 ]
]
ForestTreeIdx=6 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
	]
	set = [ 0 1 2 3 4 5 6 ]
]
]
====================== FOREST STATISTICS =========================
 Unique Trees        : 1
 Allocated Trees     : 7
 Sparse Idx          : 0.142857
 Forest Dependencies : 7 [ 0 1 2 3 4 5 6 ]
==================================================================
====================== End negating path for the pushed constraint =============================
Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))))
====================== End negating path for the pushed constraint =============================


===================== ALLOCATED EXPRESSIONS STATS : 43 =====================
IDX=0 :: Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) :: DepsSize=2 [ 3 4 ]
IDX=1 :: Read[0x2228a90, isConcrete=true]::(index=0, bits=8) :: DepsSize=1 [ 0 ]
IDX=2 :: SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)) :: DepsSize=1 [ 4 ]
IDX=3 :: SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8)) :: DepsSize=1 [ 3 ]
IDX=4 :: Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) :: DepsSize=2 [ 0 1 ]
IDX=5 :: SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8)) :: DepsSize=1 [ 1 ]
IDX=6 :: SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8)) :: DepsSize=1 [ 0 ]
IDX=7 :: Read[0x2242b40, isConcrete=false]::(index=1, bits=8) :: DepsSize=1 [ 1 ]
IDX=8 :: Read[0x2242c80, isConcrete=false]::(index=2, bits=8) :: DepsSize=1 [ 2 ]
IDX=9 :: Read[0x2242d80, isConcrete=true]::(index=3, bits=8) :: DepsSize=1 [ 3 ]
IDX=10 :: Read[0x2242f80, isConcrete=false]::(index=4, bits=8) :: DepsSize=1 [ 4 ]
IDX=11 :: Read[0x22430f0, isConcrete=false]::(index=5, bits=8) :: DepsSize=1 [ 5 ]
IDX=12 :: Read[0x2243260, isConcrete=false]::(index=6, bits=8) :: DepsSize=1 [ 6 ]
IDX=13 :: Read[0x22433d0, isConcrete=false]::(index=7, bits=8) :: DepsSize=1 [ 7 ]
IDX=14 :: Read[0x229b600, isConcrete=false]::(index=8, bits=8) :: DepsSize=1 [ 8 ]
IDX=15 :: Read[0x229b740, isConcrete=false]::(index=9, bits=8) :: DepsSize=1 [ 9 ]
IDX=16 :: Read[0x229b880, isConcrete=false]::(index=a, bits=8) :: DepsSize=1 [ 10 ]
IDX=17 :: Read[0x229b9f0, isConcrete=false]::(index=b, bits=8) :: DepsSize=1 [ 11 ]
IDX=18 :: Read[0x229bb60, isConcrete=false]::(index=c, bits=8) :: DepsSize=1 [ 12 ]
IDX=19 :: Read[0x229bcd0, isConcrete=false]::(index=d, bits=8) :: DepsSize=1 [ 13 ]
IDX=20 :: Read[0x229be40, isConcrete=false]::(index=e, bits=8) :: DepsSize=1 [ 14 ]
IDX=21 :: Read[0x229bfb0, isConcrete=false]::(index=f, bits=8) :: DepsSize=1 [ 15 ]
IDX=22 :: Read[0x229c120, isConcrete=false]::(index=10, bits=8) :: DepsSize=1 [ 16 ]
IDX=23 :: Read[0x229c290, isConcrete=false]::(index=11, bits=8) :: DepsSize=1 [ 17 ]
IDX=24 :: Read[0x229c400, isConcrete=false]::(index=12, bits=8) :: DepsSize=1 [ 18 ]
IDX=25 :: Read[0x229c570, isConcrete=false]::(index=13, bits=8) :: DepsSize=1 [ 19 ]
IDX=26 :: Read[0x229c6e0, isConcrete=false]::(index=14, bits=8) :: DepsSize=1 [ 20 ]
IDX=27 :: Read[0x229c850, isConcrete=false]::(index=15, bits=8) :: DepsSize=1 [ 21 ]
IDX=28 :: Read[0x229c9c0, isConcrete=false]::(index=16, bits=8) :: DepsSize=1 [ 22 ]
IDX=29 :: Read[0x229cb30, isConcrete=false]::(index=17, bits=8) :: DepsSize=1 [ 23 ]
IDX=30 :: Read[0x229cca0, isConcrete=false]::(index=18, bits=8) :: DepsSize=1 [ 24 ]
IDX=31 :: Read[0x229ce10, isConcrete=false]::(index=19, bits=8) :: DepsSize=1 [ 25 ]
IDX=32 :: Read[0x229cf80, isConcrete=false]::(index=1a, bits=8) :: DepsSize=1 [ 26 ]
IDX=33 :: Read[0x229d0f0, isConcrete=false]::(index=1b, bits=8) :: DepsSize=1 [ 27 ]
IDX=34 :: SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)) :: DepsSize=1 [ 5 ]
IDX=35 :: Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))) :: DepsSize=3 [ 3 4 5 ]
IDX=36 :: Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: DepsSize=5 [ 0 1 3 4 5 ]
IDX=37 :: Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) :: DepsSize=2 [ 1 2 ]
IDX=38 :: Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: DepsSize=5 [ 1 2 4 5 6 ]
IDX=39 :: Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) :: DepsSize=3 [ 4 5 6 ]
IDX=40 :: SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8)) :: DepsSize=1 [ 6 ]
IDX=41 :: Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: DepsSize=2 [ 4 5 ]
IDX=42 :: SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8)) :: DepsSize=1 [ 2 ]
===================== ALLOCATED EXPRESSIONS STATS =====================

Reading 4 bytes from address 0x7ffd072e5cc8
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Writing 4 bytes to address 0x7ffd072e5cc8
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Writing 4 bytes to address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd2
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x2326e20, addChild = [ Read[0x2242c80, isConcrete=false]::(index=2, bits=8) ]
[registerExpression] :: SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd3
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x233c8f0, addChild = [ Read[0x2242d80, isConcrete=true]::(index=3, bits=8) ]
[registerExpression] :: SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))
[Expr::addChild]  this = 0x22f2070, addChild = [ SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8)) ]
[Expr::addChild]  this = 0x22f2070, addChild = [ SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8)) ]
[registerExpression] :: Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8)))
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd5
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22afb80, addChild = [ Read[0x22430f0, isConcrete=false]::(index=5, bits=8) ]
[registerExpression] :: SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd6
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22ab5f0, addChild = [ Read[0x2243260, isConcrete=false]::(index=6, bits=8) ]
[registerExpression] :: SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))
[Expr::addChild]  this = 0x22f29b0, addChild = [ SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)) ]
[Expr::addChild]  this = 0x22f29b0, addChild = [ SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8)) ]
[registerExpression] :: Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8)))
Reading 4 bytes from address 0x7ffd072e5cc4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd7
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22b8990, addChild = [ Read[0x22433d0, isConcrete=false]::(index=7, bits=8) ]
[registerExpression] :: SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))
[Expr::addChild]  this = 0x22df600, addChild = [ SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8)) ]
[Expr::addChild]  this = 0x22df600, addChild = [ Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) ]
[registerExpression] :: Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))))
[Expr::addChild]  this = 0x22bbd20, addChild = [ Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) ]
[Expr::addChild]  this = 0x22bbd20, addChild = [ Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8)))) ]
[registerExpression] :: Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8)))))

Push Path Constrain 0x22bbd20 : {
	Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8)))))
}

====================== Start negating path for the pushed constraint =============================
Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8)))))
====================== Start negating path for the pushed constraint =============================


[Solver::addJcc] isInteresting=true
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22bbd20 [
	Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8)))))
] with Symbolic Dependencies = [ 2 3 5 6 7  ]
[DepForest] Trying to find or create DepTree for index=2
[DepForest] Trying to find or create DepTree for index=3
[DepForest] Trying to find or create DepTree for index=5
[DepForest] Trying to find or create DepTree for index=6
[DepForest] Trying to find or create DepTree for index=7



FOR TREE 0x2237950 :: SYMDEP [ 2 3 5 6 ], CONCRETE DEP [ 0 1 4 ]

[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x229db80 [
	Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=false]::(bits=32, Read[0x2242b40, isConcrete=false]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))))
] with Dependencies = [ 0 1 3 4 5  ]
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22aaa00 [
	Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))))
] with Dependencies = [ 1 2 4 5 6  ]


FOR TREE 0x22bce70 :: SYMDEP [ 2 3 5 6 ], CONCRETE DEP [ 0 1 4 ]

[Expr::addChild]  this = 0x2326840, addChild = [ Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))))) ]
[STAT] SMT: {"solving_time_elapsed": 5440 }
[DEBUG] 
Solver Model z3::sat :: {; 
(set-info :status unknown)
(declare-fun k!30 () (_ BitVec 8))
(declare-fun k!50 () (_ BitVec 8))
(declare-fun k!20 () (_ BitVec 8))
(declare-fun k!60 () (_ BitVec 8))
(declare-fun k!70 () (_ BitVec 8))
(assert
 (let ((?x28 ((_ extract 7 7) k!30)))
 (let ((?x25 (concat ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 k!30)))
 (let ((?x334 ((_ extract 7 7) k!50)))
 (let ((?x27 (concat ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 k!50)))
 (not (bvsle (bvadd (_ bv66 32) ?x27 ?x25) (_ bv132 32))))))))
(assert
 (let ((?x33 ((_ extract 7 7) k!20)))
 (let ((?x32 (concat ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 k!20)))
 (let ((?x334 ((_ extract 7 7) k!50)))
 (let ((?x27 (concat ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 k!50)))
 (let ((?x31 ((_ extract 7 7) k!60)))
 (let ((?x30 (concat ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 k!60)))
 (not (bvsle (bvadd (_ bv66 32) ?x30 ?x27) (bvadd (_ bv66 32) ?x32))))))))))
(assert
 (let ((?x28 ((_ extract 7 7) k!30)))
 (let ((?x25 (concat ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 ?x28 k!30)))
 (let ((?x33 ((_ extract 7 7) k!20)))
 (let ((?x32 (concat ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 ?x33 k!20)))
 (let ((?x31 ((_ extract 7 7) k!60)))
 (let ((?x30 (concat ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 k!60)))
 (let ((?x334 ((_ extract 7 7) k!50)))
 (let ((?x27 (concat ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 ?x334 k!50)))
 (let ((?x1401 ((_ extract 7 7) k!70)))
 (let ((?x340 (concat ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 k!70)))
 (bvsle (bvadd ?x340 ?x27 ?x30) (bvadd ?x32 ?x25)))))))))))))
(check-sat)

}
[INFO] New testcase: sanjay1_loop/000002
[QSYM::Solver] Add Constraint 0x22bbd20 :: [ Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))))) ] into DepForest=0x221d668
[DepForest] Trying to find or create DepTree for index=2
[DepForest] Trying to find or create DepTree for index=3
[DepForest] Trying to find or create DepTree for index=5
[DepForest] Trying to find or create DepTree for index=6
[DepForest] Trying to find or create DepTree for index=7
[DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
[Solver::addJcc] DepForest after negating path and adding constraint to the solver:
================== [DepForest] This=0x221d668,size=8 : [
ForestTreeIdx=0 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=1 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=2 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=3 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=4 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=5 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=6 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=7 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
]
====================== FOREST STATISTICS =========================
 Unique Trees        : 1
 Allocated Trees     : 8
 Sparse Idx          : 0.125
 Forest Dependencies : 8 [ 0 1 2 3 4 5 6 7 ]
==================================================================
====================== End negating path for the pushed constraint =============================
Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8)))))
====================== End negating path for the pushed constraint =============================


===================== ALLOCATED EXPRESSIONS STATS : 48 =====================
IDX=0 :: Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) :: DepsSize=2 [ 3 4 ]
IDX=1 :: Read[0x2228a90, isConcrete=true]::(index=0, bits=8) :: DepsSize=1 [ 0 ]
IDX=2 :: SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)) :: DepsSize=1 [ 4 ]
IDX=3 :: SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8)) :: DepsSize=1 [ 3 ]
IDX=4 :: Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) :: DepsSize=2 [ 0 1 ]
IDX=5 :: SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8)) :: DepsSize=1 [ 1 ]
IDX=6 :: SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8)) :: DepsSize=1 [ 0 ]
IDX=7 :: Read[0x2242b40, isConcrete=true]::(index=1, bits=8) :: DepsSize=1 [ 1 ]
IDX=8 :: Read[0x2242c80, isConcrete=false]::(index=2, bits=8) :: DepsSize=1 [ 2 ]
IDX=9 :: Read[0x2242d80, isConcrete=false]::(index=3, bits=8) :: DepsSize=1 [ 3 ]
IDX=10 :: Read[0x2242f80, isConcrete=true]::(index=4, bits=8) :: DepsSize=1 [ 4 ]
IDX=11 :: Read[0x22430f0, isConcrete=false]::(index=5, bits=8) :: DepsSize=1 [ 5 ]
IDX=12 :: Read[0x2243260, isConcrete=false]::(index=6, bits=8) :: DepsSize=1 [ 6 ]
IDX=13 :: Read[0x22433d0, isConcrete=false]::(index=7, bits=8) :: DepsSize=1 [ 7 ]
IDX=14 :: Read[0x229b600, isConcrete=false]::(index=8, bits=8) :: DepsSize=1 [ 8 ]
IDX=15 :: Read[0x229b740, isConcrete=false]::(index=9, bits=8) :: DepsSize=1 [ 9 ]
IDX=16 :: Read[0x229b880, isConcrete=false]::(index=a, bits=8) :: DepsSize=1 [ 10 ]
IDX=17 :: Read[0x229b9f0, isConcrete=false]::(index=b, bits=8) :: DepsSize=1 [ 11 ]
IDX=18 :: Read[0x229bb60, isConcrete=false]::(index=c, bits=8) :: DepsSize=1 [ 12 ]
IDX=19 :: Read[0x229bcd0, isConcrete=false]::(index=d, bits=8) :: DepsSize=1 [ 13 ]
IDX=20 :: Read[0x229be40, isConcrete=false]::(index=e, bits=8) :: DepsSize=1 [ 14 ]
IDX=21 :: Read[0x229bfb0, isConcrete=false]::(index=f, bits=8) :: DepsSize=1 [ 15 ]
IDX=22 :: Read[0x229c120, isConcrete=false]::(index=10, bits=8) :: DepsSize=1 [ 16 ]
IDX=23 :: Read[0x229c290, isConcrete=false]::(index=11, bits=8) :: DepsSize=1 [ 17 ]
IDX=24 :: Read[0x229c400, isConcrete=false]::(index=12, bits=8) :: DepsSize=1 [ 18 ]
IDX=25 :: Read[0x229c570, isConcrete=false]::(index=13, bits=8) :: DepsSize=1 [ 19 ]
IDX=26 :: Read[0x229c6e0, isConcrete=false]::(index=14, bits=8) :: DepsSize=1 [ 20 ]
IDX=27 :: Read[0x229c850, isConcrete=false]::(index=15, bits=8) :: DepsSize=1 [ 21 ]
IDX=28 :: Read[0x229c9c0, isConcrete=false]::(index=16, bits=8) :: DepsSize=1 [ 22 ]
IDX=29 :: Read[0x229cb30, isConcrete=false]::(index=17, bits=8) :: DepsSize=1 [ 23 ]
IDX=30 :: Read[0x229cca0, isConcrete=false]::(index=18, bits=8) :: DepsSize=1 [ 24 ]
IDX=31 :: Read[0x229ce10, isConcrete=false]::(index=19, bits=8) :: DepsSize=1 [ 25 ]
IDX=32 :: Read[0x229cf80, isConcrete=false]::(index=1a, bits=8) :: DepsSize=1 [ 26 ]
IDX=33 :: Read[0x229d0f0, isConcrete=false]::(index=1b, bits=8) :: DepsSize=1 [ 27 ]
IDX=34 :: SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)) :: DepsSize=1 [ 5 ]
IDX=35 :: Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)))) :: DepsSize=3 [ 3 4 5 ]
IDX=36 :: Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: DepsSize=5 [ 0 1 3 4 5 ]
IDX=37 :: Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) :: DepsSize=2 [ 1 2 ]
IDX=38 :: Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: DepsSize=5 [ 1 2 4 5 6 ]
IDX=39 :: Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) :: DepsSize=3 [ 4 5 6 ]
IDX=40 :: SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8)) :: DepsSize=1 [ 7 ]
IDX=41 :: SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8)) :: DepsSize=1 [ 6 ]
IDX=42 :: Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))))) :: DepsSize=5 [ 2 3 5 6 7 ]
IDX=43 :: Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: DepsSize=2 [ 4 5 ]
IDX=44 :: Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8)))) :: DepsSize=3 [ 5 6 7 ]
IDX=45 :: SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8)) :: DepsSize=1 [ 2 ]
IDX=46 :: Add[0x22f2070]::(SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) :: DepsSize=2 [ 2 3 ]
IDX=47 :: Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) :: DepsSize=2 [ 5 6 ]
===================== ALLOCATED EXPRESSIONS STATS =====================

Reading 4 bytes from address 0x7ffd072e5cc8
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Writing 4 bytes to address 0x7ffd072e5cc8
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 4 bytes from address 0x7ffd072e5cc8
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 1 bytes from address 0x7ffd072e5cd7
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22f3c80, addChild = [ Read[0x22433d0, isConcrete=false]::(index=7, bits=8) ]
[registerExpression] :: SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))
Reading 1 bytes from address 0x7ffd072e5cd5
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22e5440, addChild = [ Read[0x22430f0, isConcrete=false]::(index=5, bits=8) ]
[registerExpression] :: SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))
[Expr::addChild]  this = 0x22aa2c0, addChild = [ SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8)) ]
[Expr::addChild]  this = 0x22aa2c0, addChild = [ SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)) ]
[registerExpression] :: Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))
[registerExpression] :: Constant[0x2370120]::(value=0x52, bits=32)
[Expr::addChild]  this = 0x232c7a0, addChild = [ Constant[0x2370120]::(value=0x52, bits=32) ]
[Expr::addChild]  this = 0x232c7a0, addChild = [ Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) ]
[registerExpression] :: Equal[0x232c7a0, isConcrete=false]::(Constant[0x2370120]::(value=0x52, bits=32), Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))

Push Path Constrain 0x232c7a0 : {
	Equal[0x232c7a0, isConcrete=false]::(Constant[0x2370120]::(value=0x52, bits=32), Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))
}

====================== Start negating path for the pushed constraint =============================
Equal[0x232c7a0, isConcrete=false]::(Constant[0x2370120]::(value=0x52, bits=32), Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))
====================== Start negating path for the pushed constraint =============================


[Solver::addJcc] isInteresting=true
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x232c7a0 [
	Equal[0x232c7a0, isConcrete=false]::(Constant[0x2370120]::(value=0x52, bits=32), Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))
] with Symbolic Dependencies = [ 5 7  ]
[DepForest] Trying to find or create DepTree for index=5
[DepForest] Trying to find or create DepTree for index=7



FOR TREE 0x2237950 :: SYMDEP [ 5 7 ], CONCRETE DEP [ 0 1 2 3 4 6 ]

[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x229db80 [
	Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=false]::(bits=32, Read[0x2242d80, isConcrete=false]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)))))
] with Dependencies = [ 0 1 3 4 5  ]
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22aaa00 [
	Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=false]::(bits=32, Read[0x2242c80, isConcrete=false]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=false]::(bits=32, Read[0x2243260, isConcrete=false]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))))
] with Dependencies = [ 1 2 4 5 6  ]
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22bbd20 [
	Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)))))
] with Dependencies = [ 2 3 5 6 7  ]
[Expr::addChild]  this = 0x22da910, addChild = [ Equal[0x232c7a0, isConcrete=false]::(Constant[0x2370120]::(value=0x52, bits=32), Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) ]
[STAT] SMT: {"solving_time_elapsed": 2689 }
[DEBUG] 
Solver Model z3::sat :: {; 
(set-info :status unknown)
(declare-fun k!50 () (_ BitVec 8))
(declare-fun k!70 () (_ BitVec 8))
(assert
 (let ((?x1401 ((_ extract 7 7) k!50)))
 (let ((?x340 (concat ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 k!50)))
 (not (bvsle (bvadd (_ bv132 32) ?x340) (_ bv132 32))))))
(assert
 (let ((?x1401 ((_ extract 7 7) k!50)))
 (let ((?x340 (concat ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 k!50)))
 (not (bvsle (bvadd (_ bv132 32) ?x340) (_ bv132 32))))))
(assert
 (let ((?x1401 ((_ extract 7 7) k!50)))
 (let ((?x340 (concat ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 k!50)))
 (let ((?x32 ((_ extract 7 7) k!70)))
 (let ((?x28 (concat ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 k!70)))
 (not (bvsle (bvadd (_ bv66 32) ?x28 ?x340) (_ bv132 32))))))))
(assert
 (let ((?x1401 ((_ extract 7 7) k!50)))
 (let ((?x340 (concat ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 ?x1401 k!50)))
 (let ((?x32 ((_ extract 7 7) k!70)))
 (let ((?x28 (concat ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 ?x32 k!70)))
 (not (= ?x28 (bvadd (_ bv82 32) (bvmul (_ bv4294967295 32) ?x340)))))))))
(check-sat)

}
[INFO] New testcase: sanjay1_loop/000003
[QSYM::Solver] Add Constraint 0x22aa2c0 :: [ Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) ] into DepForest=0x221d668
[DepForest] Trying to find or create DepTree for index=5
[DepForest] Trying to find or create DepTree for index=7
[DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
[Solver::addJcc] DepForest after negating path and adding constraint to the solver:
================== [DepForest] This=0x221d668,size=8 : [
ForestTreeIdx=0 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=1 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=2 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=3 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=4 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=5 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=6 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=7 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
]
====================== FOREST STATISTICS =========================
 Unique Trees        : 1
 Allocated Trees     : 8
 Sparse Idx          : 0.125
 Forest Dependencies : 8 [ 0 1 2 3 4 5 6 7 ]
==================================================================
====================== End negating path for the pushed constraint =============================
Equal[0x232c7a0, isConcrete=false]::(Constant[0x2370120]::(value=0x52, bits=32), Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))
====================== End negating path for the pushed constraint =============================


===================== ALLOCATED EXPRESSIONS STATS : 51 =====================
IDX=0 :: Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) :: DepsSize=2 [ 3 4 ]
IDX=1 :: Read[0x2228a90, isConcrete=true]::(index=0, bits=8) :: DepsSize=1 [ 0 ]
IDX=2 :: SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)) :: DepsSize=1 [ 4 ]
IDX=3 :: SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8)) :: DepsSize=1 [ 3 ]
IDX=4 :: Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) :: DepsSize=2 [ 0 1 ]
IDX=5 :: SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8)) :: DepsSize=1 [ 1 ]
IDX=6 :: SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8)) :: DepsSize=1 [ 0 ]
IDX=7 :: Read[0x2242b40, isConcrete=true]::(index=1, bits=8) :: DepsSize=1 [ 1 ]
IDX=8 :: Read[0x2242c80, isConcrete=true]::(index=2, bits=8) :: DepsSize=1 [ 2 ]
IDX=9 :: Read[0x2242d80, isConcrete=true]::(index=3, bits=8) :: DepsSize=1 [ 3 ]
IDX=10 :: Read[0x2242f80, isConcrete=true]::(index=4, bits=8) :: DepsSize=1 [ 4 ]
IDX=11 :: Read[0x22430f0, isConcrete=false]::(index=5, bits=8) :: DepsSize=1 [ 5 ]
IDX=12 :: Read[0x2243260, isConcrete=true]::(index=6, bits=8) :: DepsSize=1 [ 6 ]
IDX=13 :: Read[0x22433d0, isConcrete=false]::(index=7, bits=8) :: DepsSize=1 [ 7 ]
IDX=14 :: Read[0x229b600, isConcrete=false]::(index=8, bits=8) :: DepsSize=1 [ 8 ]
IDX=15 :: Read[0x229b740, isConcrete=false]::(index=9, bits=8) :: DepsSize=1 [ 9 ]
IDX=16 :: Read[0x229b880, isConcrete=false]::(index=a, bits=8) :: DepsSize=1 [ 10 ]
IDX=17 :: Read[0x229b9f0, isConcrete=false]::(index=b, bits=8) :: DepsSize=1 [ 11 ]
IDX=18 :: Read[0x229bb60, isConcrete=false]::(index=c, bits=8) :: DepsSize=1 [ 12 ]
IDX=19 :: Read[0x229bcd0, isConcrete=false]::(index=d, bits=8) :: DepsSize=1 [ 13 ]
IDX=20 :: Read[0x229be40, isConcrete=false]::(index=e, bits=8) :: DepsSize=1 [ 14 ]
IDX=21 :: Read[0x229bfb0, isConcrete=false]::(index=f, bits=8) :: DepsSize=1 [ 15 ]
IDX=22 :: Read[0x229c120, isConcrete=false]::(index=10, bits=8) :: DepsSize=1 [ 16 ]
IDX=23 :: Read[0x229c290, isConcrete=false]::(index=11, bits=8) :: DepsSize=1 [ 17 ]
IDX=24 :: Read[0x229c400, isConcrete=false]::(index=12, bits=8) :: DepsSize=1 [ 18 ]
IDX=25 :: Read[0x229c570, isConcrete=false]::(index=13, bits=8) :: DepsSize=1 [ 19 ]
IDX=26 :: Read[0x229c6e0, isConcrete=false]::(index=14, bits=8) :: DepsSize=1 [ 20 ]
IDX=27 :: Read[0x229c850, isConcrete=false]::(index=15, bits=8) :: DepsSize=1 [ 21 ]
IDX=28 :: Read[0x229c9c0, isConcrete=false]::(index=16, bits=8) :: DepsSize=1 [ 22 ]
IDX=29 :: Read[0x229cb30, isConcrete=false]::(index=17, bits=8) :: DepsSize=1 [ 23 ]
IDX=30 :: Read[0x229cca0, isConcrete=false]::(index=18, bits=8) :: DepsSize=1 [ 24 ]
IDX=31 :: Read[0x229ce10, isConcrete=false]::(index=19, bits=8) :: DepsSize=1 [ 25 ]
IDX=32 :: Read[0x229cf80, isConcrete=false]::(index=1a, bits=8) :: DepsSize=1 [ 26 ]
IDX=33 :: Read[0x229d0f0, isConcrete=false]::(index=1b, bits=8) :: DepsSize=1 [ 27 ]
IDX=34 :: SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)) :: DepsSize=1 [ 5 ]
IDX=35 :: Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)))) :: DepsSize=3 [ 3 4 5 ]
IDX=36 :: Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: DepsSize=5 [ 0 1 3 4 5 ]
IDX=37 :: Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) :: DepsSize=2 [ 1 2 ]
IDX=38 :: Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: DepsSize=2 [ 5 7 ]
IDX=39 :: Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: DepsSize=5 [ 1 2 4 5 6 ]
IDX=40 :: Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) :: DepsSize=3 [ 4 5 6 ]
IDX=41 :: SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8)) :: DepsSize=1 [ 7 ]
IDX=42 :: SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)) :: DepsSize=1 [ 6 ]
IDX=43 :: Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: DepsSize=5 [ 2 3 5 6 7 ]
IDX=44 :: Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: DepsSize=2 [ 4 5 ]
IDX=45 :: Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)))) :: DepsSize=3 [ 5 6 7 ]
IDX=46 :: SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8)) :: DepsSize=1 [ 2 ]
IDX=47 :: Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) :: DepsSize=2 [ 2 3 ]
IDX=48 :: Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) :: DepsSize=2 [ 5 6 ]
IDX=49 :: Equal[0x232c7a0, isConcrete=false]::(Constant[0x2370120]::(value=0x52, bits=32), Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) :: DepsSize=2 [ 5 7 ]
IDX=50 :: Constant[0x2370120]::(value=0x52, bits=32) :: DepsSize=0 [ ]
===================== ALLOCATED EXPRESSIONS STATS =====================

Reading 1 bytes from address 0x7ffd072e5ce2
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22a69d0, addChild = [ Read[0x229c400, isConcrete=false]::(index=12, bits=8) ]
[registerExpression] :: SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))
Reading 1 bytes from address 0x7ffd072e5ce3
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22e5710, addChild = [ Read[0x229c570, isConcrete=false]::(index=13, bits=8) ]
[registerExpression] :: SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))
[Expr::addChild]  this = 0x22f00f0, addChild = [ SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8)) ]
[Expr::addChild]  this = 0x22f00f0, addChild = [ SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8)) ]
[registerExpression] :: Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8)))
[registerExpression] :: Constant[0x2327b20]::(value=0x62, bits=32)
[Expr::addChild]  this = 0x222b1d0, addChild = [ Constant[0x2327b20]::(value=0x62, bits=32) ]
[Expr::addChild]  this = 0x222b1d0, addChild = [ Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))) ]
[registerExpression] :: Equal[0x222b1d0, isConcrete=false]::(Constant[0x2327b20]::(value=0x62, bits=32), Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))))

Push Path Constrain 0x222b1d0 : {
	Equal[0x222b1d0, isConcrete=false]::(Constant[0x2327b20]::(value=0x62, bits=32), Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))))
}

====================== Start negating path for the pushed constraint =============================
Equal[0x222b1d0, isConcrete=false]::(Constant[0x2327b20]::(value=0x62, bits=32), Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))))
====================== Start negating path for the pushed constraint =============================


[Solver::addJcc] isInteresting=true
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x222b1d0 [
	Equal[0x222b1d0, isConcrete=false]::(Constant[0x2327b20]::(value=0x62, bits=32), Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))))
] with Symbolic Dependencies = [ 18 19  ]
[DepForest] Trying to find or create DepTree for index=18
[DepForest] Trying to find or create DepTree for index=19



FOR TREE 0x22aabf0 :: SYMDEP [ ], CONCRETE DEP [ ]



FOR TREE 0x22bc3d0 :: SYMDEP [ ], CONCRETE DEP [ ]

[Expr::addChild]  this = 0x22f5dc0, addChild = [ Equal[0x222b1d0, isConcrete=false]::(Constant[0x2327b20]::(value=0x62, bits=32), Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8)))) ]
[STAT] SMT: {"solving_time_elapsed": 1099 }
[DEBUG] 
Solver Model z3::sat :: {; 
(set-info :status unknown)
(declare-fun k!190 () (_ BitVec 8))
(declare-fun k!180 () (_ BitVec 8))
(assert
 (let ((?x13 ((_ extract 7 7) k!190)))
 (let ((?x2028 (concat ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 k!190)))
 (let ((?x971 ((_ extract 7 7) k!180)))
 (let ((?x2128 (concat ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 ?x971 k!180)))
 (not (= ?x2128 (bvadd (_ bv98 32) (bvmul (_ bv4294967295 32) ?x2028)))))))))
(check-sat)

}
[INFO] New testcase: sanjay1_loop/000004
[QSYM::Solver] Add Constraint 0x22f00f0 :: [ Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))) ] into DepForest=0x221d668
[DepForest] Trying to find or create DepTree for index=18
[DepForest] Trying to find or create DepTree for index=19
[DepTree] This=0x22aabf0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))) :: [ 18 19  ],
	]
	set = [ 18 19 ]
]
[Solver::addJcc] DepForest after negating path and adding constraint to the solver:
================== [DepForest] This=0x221d668,size=20 : [
ForestTreeIdx=0 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=1 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=2 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=3 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=4 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=5 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=6 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=7 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
	]
	set = [ 0 1 2 3 4 5 6 7 ]
]
ForestTreeIdx=8 DT=0
ForestTreeIdx=9 DT=0
ForestTreeIdx=10 DT=0
ForestTreeIdx=11 DT=0
ForestTreeIdx=12 DT=0
ForestTreeIdx=13 DT=0
ForestTreeIdx=14 DT=0
ForestTreeIdx=15 DT=0
ForestTreeIdx=16 DT=0
ForestTreeIdx=17 DT=0
ForestTreeIdx=18 [DepTree] This=0x22aabf0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))) :: [ 18 19  ],
	]
	set = [ 18 19 ]
]
ForestTreeIdx=19 [DepTree] This=0x22aabf0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))) :: [ 18 19  ],
	]
	set = [ 18 19 ]
]
]
====================== FOREST STATISTICS =========================
 Unique Trees        : 2
 Allocated Trees     : 20
 Sparse Idx          : 0.1
 Forest Dependencies : 10 [ 0 1 2 3 4 5 6 7 18 19 ]
==================================================================
====================== End negating path for the pushed constraint =============================
Equal[0x222b1d0, isConcrete=false]::(Constant[0x2327b20]::(value=0x62, bits=32), Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))))
====================== End negating path for the pushed constraint =============================


===================== ALLOCATED EXPRESSIONS STATS : 56 =====================
IDX=0 :: Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) :: DepsSize=2 [ 3 4 ]
IDX=1 :: Read[0x2228a90, isConcrete=true]::(index=0, bits=8) :: DepsSize=1 [ 0 ]
IDX=2 :: Equal[0x222b1d0, isConcrete=false]::(Constant[0x2327b20]::(value=0x62, bits=32), Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8)))) :: DepsSize=2 [ 18 19 ]
IDX=3 :: SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)) :: DepsSize=1 [ 4 ]
IDX=4 :: SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8)) :: DepsSize=1 [ 3 ]
IDX=5 :: Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) :: DepsSize=2 [ 0 1 ]
IDX=6 :: SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8)) :: DepsSize=1 [ 1 ]
IDX=7 :: SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8)) :: DepsSize=1 [ 0 ]
IDX=8 :: Read[0x2242b40, isConcrete=true]::(index=1, bits=8) :: DepsSize=1 [ 1 ]
IDX=9 :: Read[0x2242c80, isConcrete=true]::(index=2, bits=8) :: DepsSize=1 [ 2 ]
IDX=10 :: Read[0x2242d80, isConcrete=true]::(index=3, bits=8) :: DepsSize=1 [ 3 ]
IDX=11 :: Read[0x2242f80, isConcrete=true]::(index=4, bits=8) :: DepsSize=1 [ 4 ]
IDX=12 :: Read[0x22430f0, isConcrete=false]::(index=5, bits=8) :: DepsSize=1 [ 5 ]
IDX=13 :: Read[0x2243260, isConcrete=true]::(index=6, bits=8) :: DepsSize=1 [ 6 ]
IDX=14 :: Read[0x22433d0, isConcrete=false]::(index=7, bits=8) :: DepsSize=1 [ 7 ]
IDX=15 :: Read[0x229b600, isConcrete=false]::(index=8, bits=8) :: DepsSize=1 [ 8 ]
IDX=16 :: Read[0x229b740, isConcrete=false]::(index=9, bits=8) :: DepsSize=1 [ 9 ]
IDX=17 :: Read[0x229b880, isConcrete=false]::(index=a, bits=8) :: DepsSize=1 [ 10 ]
IDX=18 :: Read[0x229b9f0, isConcrete=false]::(index=b, bits=8) :: DepsSize=1 [ 11 ]
IDX=19 :: Read[0x229bb60, isConcrete=false]::(index=c, bits=8) :: DepsSize=1 [ 12 ]
IDX=20 :: Read[0x229bcd0, isConcrete=false]::(index=d, bits=8) :: DepsSize=1 [ 13 ]
IDX=21 :: Read[0x229be40, isConcrete=false]::(index=e, bits=8) :: DepsSize=1 [ 14 ]
IDX=22 :: Read[0x229bfb0, isConcrete=false]::(index=f, bits=8) :: DepsSize=1 [ 15 ]
IDX=23 :: Read[0x229c120, isConcrete=false]::(index=10, bits=8) :: DepsSize=1 [ 16 ]
IDX=24 :: Read[0x229c290, isConcrete=false]::(index=11, bits=8) :: DepsSize=1 [ 17 ]
IDX=25 :: Read[0x229c400, isConcrete=false]::(index=12, bits=8) :: DepsSize=1 [ 18 ]
IDX=26 :: Read[0x229c570, isConcrete=false]::(index=13, bits=8) :: DepsSize=1 [ 19 ]
IDX=27 :: Read[0x229c6e0, isConcrete=false]::(index=14, bits=8) :: DepsSize=1 [ 20 ]
IDX=28 :: Read[0x229c850, isConcrete=false]::(index=15, bits=8) :: DepsSize=1 [ 21 ]
IDX=29 :: Read[0x229c9c0, isConcrete=false]::(index=16, bits=8) :: DepsSize=1 [ 22 ]
IDX=30 :: Read[0x229cb30, isConcrete=false]::(index=17, bits=8) :: DepsSize=1 [ 23 ]
IDX=31 :: Read[0x229cca0, isConcrete=false]::(index=18, bits=8) :: DepsSize=1 [ 24 ]
IDX=32 :: Read[0x229ce10, isConcrete=false]::(index=19, bits=8) :: DepsSize=1 [ 25 ]
IDX=33 :: Read[0x229cf80, isConcrete=false]::(index=1a, bits=8) :: DepsSize=1 [ 26 ]
IDX=34 :: Read[0x229d0f0, isConcrete=false]::(index=1b, bits=8) :: DepsSize=1 [ 27 ]
IDX=35 :: SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)) :: DepsSize=1 [ 5 ]
IDX=36 :: Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)))) :: DepsSize=3 [ 3 4 5 ]
IDX=37 :: Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: DepsSize=5 [ 0 1 3 4 5 ]
IDX=38 :: Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) :: DepsSize=2 [ 1 2 ]
IDX=39 :: SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8)) :: DepsSize=1 [ 18 ]
IDX=40 :: Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: DepsSize=2 [ 5 7 ]
IDX=41 :: Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: DepsSize=5 [ 1 2 4 5 6 ]
IDX=42 :: Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) :: DepsSize=3 [ 4 5 6 ]
IDX=43 :: SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8)) :: DepsSize=1 [ 7 ]
IDX=44 :: SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)) :: DepsSize=1 [ 6 ]
IDX=45 :: Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: DepsSize=5 [ 2 3 5 6 7 ]
IDX=46 :: Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: DepsSize=2 [ 4 5 ]
IDX=47 :: Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)))) :: DepsSize=3 [ 5 6 7 ]
IDX=48 :: SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8)) :: DepsSize=1 [ 19 ]
IDX=49 :: SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8)) :: DepsSize=1 [ 2 ]
IDX=50 :: Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))) :: DepsSize=2 [ 18 19 ]
IDX=51 :: Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) :: DepsSize=2 [ 2 3 ]
IDX=52 :: Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) :: DepsSize=2 [ 5 6 ]
IDX=53 :: Constant[0x2327b20]::(value=0x62, bits=32) :: DepsSize=0 [ ]
IDX=54 :: Equal[0x232c7a0, isConcrete=false]::(Constant[0x2370120]::(value=0x52, bits=32), Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) :: DepsSize=2 [ 5 7 ]
IDX=55 :: Constant[0x2370120]::(value=0x52, bits=32) :: DepsSize=0 [ ]
===================== ALLOCATED EXPRESSIONS STATS =====================

Reading 1 bytes from address 0x7ffd072e5cd2
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x23a6a50, addChild = [ Read[0x2242c80, isConcrete=true]::(index=2, bits=8) ]
[registerExpression] :: SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))
Reading 1 bytes from address 0x7ffd072e5cd4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x231e4e0, addChild = [ Read[0x2242f80, isConcrete=true]::(index=4, bits=8) ]
[registerExpression] :: SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))
[Expr::addChild]  this = 0x230b590, addChild = [ SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8)) ]
[Expr::addChild]  this = 0x230b590, addChild = [ SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)) ]
[registerExpression] :: Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)))
[registerExpression] :: Constant[0x22fd890]::(value=0x58, bits=32)
[Expr::addChild]  this = 0x23701e0, addChild = [ Constant[0x22fd890]::(value=0x58, bits=32) ]
[Expr::addChild]  this = 0x23701e0, addChild = [ Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) ]
[registerExpression] :: Equal[0x23701e0, isConcrete=true]::(Constant[0x22fd890]::(value=0x58, bits=32), Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))

Push Path Constrain 0x23701e0 : {
	Equal[0x23701e0, isConcrete=true]::(Constant[0x22fd890]::(value=0x58, bits=32), Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))
}

====================== Start negating path for the pushed constraint =============================
Equal[0x23701e0, isConcrete=true]::(Constant[0x22fd890]::(value=0x58, bits=32), Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))
====================== Start negating path for the pushed constraint =============================


!!!!!!!!!!!!!!!!!!! IT IS FULLY CONCRETIZED :: Equal[0x23701e0, isConcrete=true]::(Constant[0x22fd890]::(value=0x58, bits=32), Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))
===================== ALLOCATED EXPRESSIONS STATS : 59 =====================
IDX=0 :: Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) :: DepsSize=2 [ 3 4 ]
IDX=1 :: Read[0x2228a90, isConcrete=true]::(index=0, bits=8) :: DepsSize=1 [ 0 ]
IDX=2 :: Equal[0x222b1d0, isConcrete=false]::(Constant[0x2327b20]::(value=0x62, bits=32), Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8)))) :: DepsSize=2 [ 18 19 ]
IDX=3 :: SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)) :: DepsSize=1 [ 4 ]
IDX=4 :: SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8)) :: DepsSize=1 [ 3 ]
IDX=5 :: Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) :: DepsSize=2 [ 0 1 ]
IDX=6 :: SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8)) :: DepsSize=1 [ 1 ]
IDX=7 :: SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8)) :: DepsSize=1 [ 0 ]
IDX=8 :: Read[0x2242b40, isConcrete=true]::(index=1, bits=8) :: DepsSize=1 [ 1 ]
IDX=9 :: Read[0x2242c80, isConcrete=true]::(index=2, bits=8) :: DepsSize=1 [ 2 ]
IDX=10 :: Read[0x2242d80, isConcrete=true]::(index=3, bits=8) :: DepsSize=1 [ 3 ]
IDX=11 :: Read[0x2242f80, isConcrete=true]::(index=4, bits=8) :: DepsSize=1 [ 4 ]
IDX=12 :: Read[0x22430f0, isConcrete=false]::(index=5, bits=8) :: DepsSize=1 [ 5 ]
IDX=13 :: Read[0x2243260, isConcrete=true]::(index=6, bits=8) :: DepsSize=1 [ 6 ]
IDX=14 :: Read[0x22433d0, isConcrete=false]::(index=7, bits=8) :: DepsSize=1 [ 7 ]
IDX=15 :: Read[0x229b600, isConcrete=false]::(index=8, bits=8) :: DepsSize=1 [ 8 ]
IDX=16 :: Read[0x229b740, isConcrete=false]::(index=9, bits=8) :: DepsSize=1 [ 9 ]
IDX=17 :: Read[0x229b880, isConcrete=false]::(index=a, bits=8) :: DepsSize=1 [ 10 ]
IDX=18 :: Read[0x229b9f0, isConcrete=false]::(index=b, bits=8) :: DepsSize=1 [ 11 ]
IDX=19 :: Read[0x229bb60, isConcrete=false]::(index=c, bits=8) :: DepsSize=1 [ 12 ]
IDX=20 :: Read[0x229bcd0, isConcrete=false]::(index=d, bits=8) :: DepsSize=1 [ 13 ]
IDX=21 :: Read[0x229be40, isConcrete=false]::(index=e, bits=8) :: DepsSize=1 [ 14 ]
IDX=22 :: Read[0x229bfb0, isConcrete=false]::(index=f, bits=8) :: DepsSize=1 [ 15 ]
IDX=23 :: Read[0x229c120, isConcrete=false]::(index=10, bits=8) :: DepsSize=1 [ 16 ]
IDX=24 :: Read[0x229c290, isConcrete=false]::(index=11, bits=8) :: DepsSize=1 [ 17 ]
IDX=25 :: Read[0x229c400, isConcrete=false]::(index=12, bits=8) :: DepsSize=1 [ 18 ]
IDX=26 :: Read[0x229c570, isConcrete=false]::(index=13, bits=8) :: DepsSize=1 [ 19 ]
IDX=27 :: Read[0x229c6e0, isConcrete=false]::(index=14, bits=8) :: DepsSize=1 [ 20 ]
IDX=28 :: Read[0x229c850, isConcrete=false]::(index=15, bits=8) :: DepsSize=1 [ 21 ]
IDX=29 :: Read[0x229c9c0, isConcrete=false]::(index=16, bits=8) :: DepsSize=1 [ 22 ]
IDX=30 :: Read[0x229cb30, isConcrete=false]::(index=17, bits=8) :: DepsSize=1 [ 23 ]
IDX=31 :: Read[0x229cca0, isConcrete=false]::(index=18, bits=8) :: DepsSize=1 [ 24 ]
IDX=32 :: Read[0x229ce10, isConcrete=false]::(index=19, bits=8) :: DepsSize=1 [ 25 ]
IDX=33 :: Read[0x229cf80, isConcrete=false]::(index=1a, bits=8) :: DepsSize=1 [ 26 ]
IDX=34 :: Read[0x229d0f0, isConcrete=false]::(index=1b, bits=8) :: DepsSize=1 [ 27 ]
IDX=35 :: SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)) :: DepsSize=1 [ 5 ]
IDX=36 :: Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)))) :: DepsSize=3 [ 3 4 5 ]
IDX=37 :: Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: DepsSize=5 [ 0 1 3 4 5 ]
IDX=38 :: Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) :: DepsSize=2 [ 1 2 ]
IDX=39 :: SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8)) :: DepsSize=1 [ 18 ]
IDX=40 :: Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: DepsSize=2 [ 5 7 ]
IDX=41 :: Slt[0x22aaa00, isConcrete=false]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: DepsSize=5 [ 1 2 4 5 6 ]
IDX=42 :: Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) :: DepsSize=3 [ 4 5 6 ]
IDX=43 :: SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8)) :: DepsSize=1 [ 7 ]
IDX=44 :: SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)) :: DepsSize=1 [ 6 ]
IDX=45 :: Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: DepsSize=5 [ 2 3 5 6 7 ]
IDX=46 :: Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: DepsSize=2 [ 4 5 ]
IDX=47 :: Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)))) :: DepsSize=3 [ 5 6 7 ]
IDX=48 :: SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8)) :: DepsSize=1 [ 19 ]
IDX=49 :: SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8)) :: DepsSize=1 [ 2 ]
IDX=50 :: Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))) :: DepsSize=2 [ 18 19 ]
IDX=51 :: Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) :: DepsSize=2 [ 2 3 ]
IDX=52 :: Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) :: DepsSize=2 [ 5 6 ]
IDX=53 :: Constant[0x22fd890]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=54 :: Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) :: DepsSize=2 [ 2 4 ]
IDX=55 :: Constant[0x2327b20]::(value=0x62, bits=32) :: DepsSize=0 [ ]
IDX=56 :: Equal[0x232c7a0, isConcrete=false]::(Constant[0x2370120]::(value=0x52, bits=32), Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) :: DepsSize=2 [ 5 7 ]
IDX=57 :: Constant[0x2370120]::(value=0x52, bits=32) :: DepsSize=0 [ ]
IDX=58 :: Equal[0x23701e0, isConcrete=true]::(Constant[0x22fd890]::(value=0x58, bits=32), Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)))) :: DepsSize=2 [ 2 4 ]
===================== ALLOCATED EXPRESSIONS STATS =====================

Reading 1 bytes from address 0x7ffd072e5cd4
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22af560, addChild = [ Read[0x2242f80, isConcrete=true]::(index=4, bits=8) ]
[registerExpression] :: SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))
Reading 1 bytes from address 0x7ffd072e5cd8
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22af450, addChild = [ Read[0x229b600, isConcrete=false]::(index=8, bits=8) ]
[registerExpression] :: SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))
[Expr::addChild]  this = 0x22df870, addChild = [ SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)) ]
[Expr::addChild]  this = 0x22df870, addChild = [ SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8)) ]
[registerExpression] :: Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8)))
[registerExpression] :: Constant[0x22ad410]::(value=0x58, bits=32)
[Expr::addChild]  this = 0x23a69a0, addChild = [ Constant[0x22ad410]::(value=0x58, bits=32) ]
[Expr::addChild]  this = 0x23a69a0, addChild = [ Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) ]
[registerExpression] :: Equal[0x23a69a0, isConcrete=false]::(Constant[0x22ad410]::(value=0x58, bits=32), Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))))

Push Path Constrain 0x23a69a0 : {
	Equal[0x23a69a0, isConcrete=false]::(Constant[0x22ad410]::(value=0x58, bits=32), Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))))
}

====================== Start negating path for the pushed constraint =============================
Equal[0x23a69a0, isConcrete=false]::(Constant[0x22ad410]::(value=0x58, bits=32), Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))))
====================== Start negating path for the pushed constraint =============================


[Solver::addJcc] isInteresting=true
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x23a69a0 [
	Equal[0x23a69a0, isConcrete=false]::(Constant[0x22ad410]::(value=0x58, bits=32), Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))))
] with Symbolic Dependencies = [ 4 8  ]
[DepForest] Trying to find or create DepTree for index=4
[DepForest] Trying to find or create DepTree for index=8



FOR TREE 0x2237950 :: SYMDEP [ 4 ], CONCRETE DEP [ 0 1 2 3 5 6 7 ]

[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x229db80 [
	Slt[0x229db80, isConcrete=false]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)))))
] with Dependencies = [ 0 1 3 4 5  ]
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22aaa00 [
	Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8)))))
] with Dependencies = [ 1 2 4 5 6  ]
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22bbd20 [
	Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)))))
] with Dependencies = [ 2 3 5 6 7  ]
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22aa2c0 [
	Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8)))
] with Dependencies = [ 5 7  ]


FOR TREE 0x22fa670 :: SYMDEP [ 4 ], CONCRETE DEP [ 0 1 2 3 5 6 7 ]

[STAT] SMT: {"solving_time_elapsed": 1455 }
[DEBUG] 
Solver Model z3::sat :: {; 
(set-info :status unknown)
(declare-fun k!40 () (_ BitVec 8))
(declare-fun k!80 () (_ BitVec 8))
(assert
 (let ((?x13 ((_ extract 7 7) k!40)))
 (let ((?x2028 (concat ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 k!40)))
 (not (bvsle (bvadd (_ bv86 32) ?x2028) (_ bv132 32))))))
(assert
 (let ((?x13 ((_ extract 7 7) k!40)))
 (let ((?x2028 (concat ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 k!40)))
 (not (bvsle (bvadd (_ bv86 32) ?x2028) (_ bv132 32))))))
(assert
 (let ((?x2583 ((_ extract 7 7) k!80)))
 (let ((?x2586 (concat ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 k!80)))
 (let ((?x13 ((_ extract 7 7) k!40)))
 (let ((?x2028 (concat ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 ?x13 k!40)))
 (= ?x2028 (bvadd (_ bv88 32) (bvmul (_ bv4294967295 32) ?x2586))))))))
(check-sat)

}
[INFO] New testcase: sanjay1_loop/000005
[QSYM::Solver] Add Constraint 0x22df870 :: [ Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) ] into DepForest=0x221d668
[DepForest] Trying to find or create DepTree for index=4
[DepForest] Trying to find or create DepTree for index=8
[DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
[Solver::addJcc] DepForest after negating path and adding constraint to the solver:
================== [DepForest] This=0x221d668,size=20 : [
ForestTreeIdx=0 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=1 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=2 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=3 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=4 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=5 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=6 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=7 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=8 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=9 DT=0
ForestTreeIdx=10 DT=0
ForestTreeIdx=11 DT=0
ForestTreeIdx=12 DT=0
ForestTreeIdx=13 DT=0
ForestTreeIdx=14 DT=0
ForestTreeIdx=15 DT=0
ForestTreeIdx=16 DT=0
ForestTreeIdx=17 DT=0
ForestTreeIdx=18 [DepTree] This=0x22aabf0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))) :: [ 18 19  ],
	]
	set = [ 18 19 ]
]
ForestTreeIdx=19 [DepTree] This=0x22aabf0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))) :: [ 18 19  ],
	]
	set = [ 18 19 ]
]
]
====================== FOREST STATISTICS =========================
 Unique Trees        : 2
 Allocated Trees     : 20
 Sparse Idx          : 0.1
 Forest Dependencies : 11 [ 0 1 2 3 4 5 6 7 8 18 19 ]
==================================================================
====================== End negating path for the pushed constraint =============================
Equal[0x23a69a0, isConcrete=false]::(Constant[0x22ad410]::(value=0x58, bits=32), Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))))
====================== End negating path for the pushed constraint =============================


===================== ALLOCATED EXPRESSIONS STATS : 63 =====================
IDX=0 :: Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) :: DepsSize=2 [ 3 4 ]
IDX=1 :: Read[0x2228a90, isConcrete=true]::(index=0, bits=8) :: DepsSize=1 [ 0 ]
IDX=2 :: Equal[0x222b1d0, isConcrete=false]::(Constant[0x2327b20]::(value=0x62, bits=32), Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8)))) :: DepsSize=2 [ 18 19 ]
IDX=3 :: SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)) :: DepsSize=1 [ 4 ]
IDX=4 :: SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8)) :: DepsSize=1 [ 3 ]
IDX=5 :: Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) :: DepsSize=2 [ 0 1 ]
IDX=6 :: SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8)) :: DepsSize=1 [ 1 ]
IDX=7 :: SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8)) :: DepsSize=1 [ 0 ]
IDX=8 :: Read[0x2242b40, isConcrete=true]::(index=1, bits=8) :: DepsSize=1 [ 1 ]
IDX=9 :: Read[0x2242c80, isConcrete=true]::(index=2, bits=8) :: DepsSize=1 [ 2 ]
IDX=10 :: Read[0x2242d80, isConcrete=true]::(index=3, bits=8) :: DepsSize=1 [ 3 ]
IDX=11 :: Read[0x2242f80, isConcrete=false]::(index=4, bits=8) :: DepsSize=1 [ 4 ]
IDX=12 :: Read[0x22430f0, isConcrete=true]::(index=5, bits=8) :: DepsSize=1 [ 5 ]
IDX=13 :: Read[0x2243260, isConcrete=true]::(index=6, bits=8) :: DepsSize=1 [ 6 ]
IDX=14 :: Read[0x22433d0, isConcrete=false]::(index=7, bits=8) :: DepsSize=1 [ 7 ]
IDX=15 :: Read[0x229b600, isConcrete=false]::(index=8, bits=8) :: DepsSize=1 [ 8 ]
IDX=16 :: Read[0x229b740, isConcrete=false]::(index=9, bits=8) :: DepsSize=1 [ 9 ]
IDX=17 :: Read[0x229b880, isConcrete=false]::(index=a, bits=8) :: DepsSize=1 [ 10 ]
IDX=18 :: Read[0x229b9f0, isConcrete=false]::(index=b, bits=8) :: DepsSize=1 [ 11 ]
IDX=19 :: Read[0x229bb60, isConcrete=false]::(index=c, bits=8) :: DepsSize=1 [ 12 ]
IDX=20 :: Read[0x229bcd0, isConcrete=false]::(index=d, bits=8) :: DepsSize=1 [ 13 ]
IDX=21 :: Read[0x229be40, isConcrete=false]::(index=e, bits=8) :: DepsSize=1 [ 14 ]
IDX=22 :: Read[0x229bfb0, isConcrete=false]::(index=f, bits=8) :: DepsSize=1 [ 15 ]
IDX=23 :: Read[0x229c120, isConcrete=false]::(index=10, bits=8) :: DepsSize=1 [ 16 ]
IDX=24 :: Read[0x229c290, isConcrete=false]::(index=11, bits=8) :: DepsSize=1 [ 17 ]
IDX=25 :: Read[0x229c400, isConcrete=false]::(index=12, bits=8) :: DepsSize=1 [ 18 ]
IDX=26 :: Read[0x229c570, isConcrete=false]::(index=13, bits=8) :: DepsSize=1 [ 19 ]
IDX=27 :: Read[0x229c6e0, isConcrete=false]::(index=14, bits=8) :: DepsSize=1 [ 20 ]
IDX=28 :: Read[0x229c850, isConcrete=false]::(index=15, bits=8) :: DepsSize=1 [ 21 ]
IDX=29 :: Read[0x229c9c0, isConcrete=false]::(index=16, bits=8) :: DepsSize=1 [ 22 ]
IDX=30 :: Read[0x229cb30, isConcrete=false]::(index=17, bits=8) :: DepsSize=1 [ 23 ]
IDX=31 :: Read[0x229cca0, isConcrete=false]::(index=18, bits=8) :: DepsSize=1 [ 24 ]
IDX=32 :: Read[0x229ce10, isConcrete=false]::(index=19, bits=8) :: DepsSize=1 [ 25 ]
IDX=33 :: Read[0x229cf80, isConcrete=false]::(index=1a, bits=8) :: DepsSize=1 [ 26 ]
IDX=34 :: Read[0x229d0f0, isConcrete=false]::(index=1b, bits=8) :: DepsSize=1 [ 27 ]
IDX=35 :: SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8)) :: DepsSize=1 [ 5 ]
IDX=36 :: Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))) :: DepsSize=3 [ 3 4 5 ]
IDX=37 :: Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: DepsSize=5 [ 0 1 3 4 5 ]
IDX=38 :: Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) :: DepsSize=2 [ 1 2 ]
IDX=39 :: SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8)) :: DepsSize=1 [ 18 ]
IDX=40 :: Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: DepsSize=2 [ 5 7 ]
IDX=41 :: Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: DepsSize=5 [ 1 2 4 5 6 ]
IDX=42 :: Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8)))) :: DepsSize=3 [ 4 5 6 ]
IDX=43 :: Constant[0x22ad410]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=44 :: SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8)) :: DepsSize=1 [ 8 ]
IDX=45 :: SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8)) :: DepsSize=1 [ 7 ]
IDX=46 :: SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)) :: DepsSize=1 [ 6 ]
IDX=47 :: Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: DepsSize=5 [ 2 3 5 6 7 ]
IDX=48 :: Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: DepsSize=2 [ 4 5 ]
IDX=49 :: Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)))) :: DepsSize=3 [ 5 6 7 ]
IDX=50 :: Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: DepsSize=2 [ 4 8 ]
IDX=51 :: SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8)) :: DepsSize=1 [ 19 ]
IDX=52 :: SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8)) :: DepsSize=1 [ 2 ]
IDX=53 :: Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))) :: DepsSize=2 [ 18 19 ]
IDX=54 :: Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) :: DepsSize=2 [ 2 3 ]
IDX=55 :: Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) :: DepsSize=2 [ 5 6 ]
IDX=56 :: Constant[0x22fd890]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=57 :: Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) :: DepsSize=2 [ 2 4 ]
IDX=58 :: Constant[0x2327b20]::(value=0x62, bits=32) :: DepsSize=0 [ ]
IDX=59 :: Equal[0x232c7a0, isConcrete=false]::(Constant[0x2370120]::(value=0x52, bits=32), Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8)))) :: DepsSize=2 [ 5 7 ]
IDX=60 :: Constant[0x2370120]::(value=0x52, bits=32) :: DepsSize=0 [ ]
IDX=61 :: Equal[0x23701e0, isConcrete=true]::(Constant[0x22fd890]::(value=0x58, bits=32), Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))) :: DepsSize=2 [ 2 4 ]
IDX=62 :: Equal[0x23a69a0, isConcrete=false]::(Constant[0x22ad410]::(value=0x58, bits=32), Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8)))) :: DepsSize=2 [ 4 8 ]
===================== ALLOCATED EXPRESSIONS STATS =====================

Reading 1 bytes from address 0x7ffd072e5cdf
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x230c110, addChild = [ Read[0x229bfb0, isConcrete=false]::(index=f, bits=8) ]
[registerExpression] :: SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))
Reading 1 bytes from address 0x7ffd072e5ce2
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x232afa0, addChild = [ Read[0x229c400, isConcrete=false]::(index=12, bits=8) ]
[registerExpression] :: SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))
[Expr::addChild]  this = 0x22fcf40, addChild = [ SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8)) ]
[Expr::addChild]  this = 0x22fcf40, addChild = [ SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8)) ]
[registerExpression] :: Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8)))
[registerExpression] :: Constant[0x220e430]::(value=0x55, bits=32)
[Expr::addChild]  this = 0x22bbe00, addChild = [ Constant[0x220e430]::(value=0x55, bits=32) ]
[Expr::addChild]  this = 0x22bbe00, addChild = [ Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) ]
[registerExpression] :: Equal[0x22bbe00, isConcrete=false]::(Constant[0x220e430]::(value=0x55, bits=32), Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))))

Push Path Constrain 0x22bbe00 : {
	Equal[0x22bbe00, isConcrete=false]::(Constant[0x220e430]::(value=0x55, bits=32), Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))))
}

====================== Start negating path for the pushed constraint =============================
Equal[0x22bbe00, isConcrete=false]::(Constant[0x220e430]::(value=0x55, bits=32), Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))))
====================== Start negating path for the pushed constraint =============================


[Solver::addJcc] isInteresting=true
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22bbe00 [
	Equal[0x22bbe00, isConcrete=false]::(Constant[0x220e430]::(value=0x55, bits=32), Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))))
] with Symbolic Dependencies = [ 15 18  ]
[DepForest] Trying to find or create DepTree for index=15
[DepForest] Trying to find or create DepTree for index=18



FOR TREE 0x22aabf0 :: SYMDEP [ 18 ], CONCRETE DEP [ 19 ]

[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22f00f0 [
	Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8)))
] with Dependencies = [ 18 19  ]
[Expr::addChild]  this = 0x2370070, addChild = [ Constant[0x22aa6e0]::(value=0x62, bits=32) ]
[Expr::addChild]  this = 0x2370070, addChild = [ Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=false]::(bits=32, Read[0x229c570, isConcrete=false]::(index=13, bits=8))) ]


FOR TREE 0x22b22f0 :: SYMDEP [ 18 ], CONCRETE DEP [ 19 ]

[Expr::addChild]  this = 0x22fd290, addChild = [ Equal[0x22bbe00, isConcrete=false]::(Constant[0x220e430]::(value=0x55, bits=32), Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8)))) ]
[STAT] SMT: {"solving_time_elapsed": 1114 }
[DEBUG] 
Solver Model z3::sat :: {; 
(set-info :status unknown)
(declare-fun k!180 () (_ BitVec 8))
(declare-fun k!150 () (_ BitVec 8))
(assert
 (and (= k!180 (_ bv33 8)) (= ((_ extract 7 7) k!180) (_ bv0 1))))
(assert
 (let ((?x2583 ((_ extract 7 7) k!180)))
 (let ((?x30 (concat ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 ?x2583 k!180)))
 (let ((?x31 ((_ extract 7 7) k!150)))
 (let ((?x1371 (concat ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 k!150)))
 (not (= ?x1371 (bvadd (_ bv85 32) (bvmul (_ bv4294967295 32) ?x30)))))))))
(check-sat)

}
[INFO] New testcase: sanjay1_loop/000006
[QSYM::Solver] Add Constraint 0x22fcf40 :: [ Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) ] into DepForest=0x221d668
[DepForest] Trying to find or create DepTree for index=15
[DepForest] Trying to find or create DepTree for index=18
[DepTree] This=0x22b22f0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) :: [ 15 18  ],
	]
	set = [ 15 18 19 ]
]
[Solver::addJcc] DepForest after negating path and adding constraint to the solver:
================== [DepForest] This=0x221d668,size=20 : [
ForestTreeIdx=0 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=1 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=2 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=3 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=4 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=5 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=6 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=7 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=8 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 ]
]
ForestTreeIdx=9 DT=0
ForestTreeIdx=10 DT=0
ForestTreeIdx=11 DT=0
ForestTreeIdx=12 DT=0
ForestTreeIdx=13 DT=0
ForestTreeIdx=14 DT=0
ForestTreeIdx=15 [DepTree] This=0x22b22f0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) :: [ 15 18  ],
	]
	set = [ 15 18 19 ]
]
ForestTreeIdx=16 DT=0
ForestTreeIdx=17 DT=0
ForestTreeIdx=18 [DepTree] This=0x22b22f0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) :: [ 15 18  ],
	]
	set = [ 15 18 19 ]
]
ForestTreeIdx=19 [DepTree] This=0x22b22f0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) :: [ 15 18  ],
	]
	set = [ 15 18 19 ]
]
]
====================== FOREST STATISTICS =========================
 Unique Trees        : 2
 Allocated Trees     : 20
 Sparse Idx          : 0.1
 Forest Dependencies : 12 [ 0 1 2 3 4 5 6 7 8 15 18 19 ]
==================================================================
====================== End negating path for the pushed constraint =============================
Equal[0x22bbe00, isConcrete=false]::(Constant[0x220e430]::(value=0x55, bits=32), Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))))
====================== End negating path for the pushed constraint =============================


===================== ALLOCATED EXPRESSIONS STATS : 67 =====================
IDX=0 :: Constant[0x220e430]::(value=0x55, bits=32) :: DepsSize=0 [ ]
IDX=1 :: Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) :: DepsSize=2 [ 3 4 ]
IDX=2 :: Read[0x2228a90, isConcrete=true]::(index=0, bits=8) :: DepsSize=1 [ 0 ]
IDX=3 :: Equal[0x222b1d0, isConcrete=false]::(Constant[0x2327b20]::(value=0x62, bits=32), Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8)))) :: DepsSize=2 [ 18 19 ]
IDX=4 :: SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)) :: DepsSize=1 [ 4 ]
IDX=5 :: SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8)) :: DepsSize=1 [ 3 ]
IDX=6 :: Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) :: DepsSize=2 [ 0 1 ]
IDX=7 :: SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8)) :: DepsSize=1 [ 1 ]
IDX=8 :: SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8)) :: DepsSize=1 [ 0 ]
IDX=9 :: Read[0x2242b40, isConcrete=true]::(index=1, bits=8) :: DepsSize=1 [ 1 ]
IDX=10 :: Read[0x2242c80, isConcrete=true]::(index=2, bits=8) :: DepsSize=1 [ 2 ]
IDX=11 :: Read[0x2242d80, isConcrete=true]::(index=3, bits=8) :: DepsSize=1 [ 3 ]
IDX=12 :: Read[0x2242f80, isConcrete=false]::(index=4, bits=8) :: DepsSize=1 [ 4 ]
IDX=13 :: Read[0x22430f0, isConcrete=true]::(index=5, bits=8) :: DepsSize=1 [ 5 ]
IDX=14 :: Read[0x2243260, isConcrete=true]::(index=6, bits=8) :: DepsSize=1 [ 6 ]
IDX=15 :: Read[0x22433d0, isConcrete=false]::(index=7, bits=8) :: DepsSize=1 [ 7 ]
IDX=16 :: Read[0x229b600, isConcrete=false]::(index=8, bits=8) :: DepsSize=1 [ 8 ]
IDX=17 :: Read[0x229b740, isConcrete=false]::(index=9, bits=8) :: DepsSize=1 [ 9 ]
IDX=18 :: Read[0x229b880, isConcrete=false]::(index=a, bits=8) :: DepsSize=1 [ 10 ]
IDX=19 :: Read[0x229b9f0, isConcrete=false]::(index=b, bits=8) :: DepsSize=1 [ 11 ]
IDX=20 :: Read[0x229bb60, isConcrete=false]::(index=c, bits=8) :: DepsSize=1 [ 12 ]
IDX=21 :: Read[0x229bcd0, isConcrete=false]::(index=d, bits=8) :: DepsSize=1 [ 13 ]
IDX=22 :: Read[0x229be40, isConcrete=false]::(index=e, bits=8) :: DepsSize=1 [ 14 ]
IDX=23 :: Read[0x229bfb0, isConcrete=false]::(index=f, bits=8) :: DepsSize=1 [ 15 ]
IDX=24 :: Read[0x229c120, isConcrete=false]::(index=10, bits=8) :: DepsSize=1 [ 16 ]
IDX=25 :: Read[0x229c290, isConcrete=false]::(index=11, bits=8) :: DepsSize=1 [ 17 ]
IDX=26 :: Read[0x229c400, isConcrete=false]::(index=12, bits=8) :: DepsSize=1 [ 18 ]
IDX=27 :: Read[0x229c570, isConcrete=true]::(index=13, bits=8) :: DepsSize=1 [ 19 ]
IDX=28 :: Read[0x229c6e0, isConcrete=false]::(index=14, bits=8) :: DepsSize=1 [ 20 ]
IDX=29 :: Read[0x229c850, isConcrete=false]::(index=15, bits=8) :: DepsSize=1 [ 21 ]
IDX=30 :: Read[0x229c9c0, isConcrete=false]::(index=16, bits=8) :: DepsSize=1 [ 22 ]
IDX=31 :: Read[0x229cb30, isConcrete=false]::(index=17, bits=8) :: DepsSize=1 [ 23 ]
IDX=32 :: Read[0x229cca0, isConcrete=false]::(index=18, bits=8) :: DepsSize=1 [ 24 ]
IDX=33 :: Read[0x229ce10, isConcrete=false]::(index=19, bits=8) :: DepsSize=1 [ 25 ]
IDX=34 :: Read[0x229cf80, isConcrete=false]::(index=1a, bits=8) :: DepsSize=1 [ 26 ]
IDX=35 :: Read[0x229d0f0, isConcrete=false]::(index=1b, bits=8) :: DepsSize=1 [ 27 ]
IDX=36 :: SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8)) :: DepsSize=1 [ 5 ]
IDX=37 :: Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))) :: DepsSize=3 [ 3 4 5 ]
IDX=38 :: Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))))) :: DepsSize=5 [ 0 1 3 4 5 ]
IDX=39 :: Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) :: DepsSize=2 [ 1 2 ]
IDX=40 :: SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8)) :: DepsSize=1 [ 18 ]
IDX=41 :: Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: DepsSize=2 [ 5 7 ]
IDX=42 :: Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))))) :: DepsSize=5 [ 1 2 4 5 6 ]
IDX=43 :: Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8)))) :: DepsSize=3 [ 4 5 6 ]
IDX=44 :: Constant[0x22ad410]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=45 :: SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8)) :: DepsSize=1 [ 8 ]
IDX=46 :: SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8)) :: DepsSize=1 [ 7 ]
IDX=47 :: SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)) :: DepsSize=1 [ 6 ]
IDX=48 :: Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: DepsSize=5 [ 2 3 5 6 7 ]
IDX=49 :: Equal[0x22bbe00, isConcrete=false]::(Constant[0x220e430]::(value=0x55, bits=32), Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8)))) :: DepsSize=2 [ 15 18 ]
IDX=50 :: Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) :: DepsSize=2 [ 4 5 ]
IDX=51 :: Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)))) :: DepsSize=3 [ 5 6 7 ]
IDX=52 :: Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: DepsSize=2 [ 4 8 ]
IDX=53 :: SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8)) :: DepsSize=1 [ 19 ]
IDX=54 :: SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8)) :: DepsSize=1 [ 2 ]
IDX=55 :: Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: DepsSize=2 [ 18 19 ]
IDX=56 :: Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) :: DepsSize=2 [ 2 3 ]
IDX=57 :: Add[0x22f29b0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) :: DepsSize=2 [ 5 6 ]
IDX=58 :: Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) :: DepsSize=2 [ 15 18 ]
IDX=59 :: Constant[0x22fd890]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=60 :: Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) :: DepsSize=2 [ 2 4 ]
IDX=61 :: SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8)) :: DepsSize=1 [ 15 ]
IDX=62 :: Constant[0x2327b20]::(value=0x62, bits=32) :: DepsSize=0 [ ]
IDX=63 :: Equal[0x232c7a0, isConcrete=false]::(Constant[0x2370120]::(value=0x52, bits=32), Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8)))) :: DepsSize=2 [ 5 7 ]
IDX=64 :: Constant[0x2370120]::(value=0x52, bits=32) :: DepsSize=0 [ ]
IDX=65 :: Equal[0x23701e0, isConcrete=true]::(Constant[0x22fd890]::(value=0x58, bits=32), Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))) :: DepsSize=2 [ 2 4 ]
IDX=66 :: Equal[0x23a69a0, isConcrete=false]::(Constant[0x22ad410]::(value=0x58, bits=32), Add[0x22df870]::(SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8)))) :: DepsSize=2 [ 4 8 ]
===================== ALLOCATED EXPRESSIONS STATS =====================

Reading 1 bytes from address 0x7ffd072e5cd5
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x234f650, addChild = [ Read[0x22430f0, isConcrete=true]::(index=5, bits=8) ]
[registerExpression] :: SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))
Reading 1 bytes from address 0x7ffd072e5cd9
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x234f9c0, addChild = [ Read[0x229b740, isConcrete=false]::(index=9, bits=8) ]
[registerExpression] :: SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))
[Expr::addChild]  this = 0x231d610, addChild = [ SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8)) ]
[Expr::addChild]  this = 0x231d610, addChild = [ SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8)) ]
[registerExpression] :: Add[0x231d610]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8)))
[registerExpression] :: Constant[0x22a7cb0]::(value=0x58, bits=32)
[Expr::addChild]  this = 0x2334f60, addChild = [ Constant[0x22a7cb0]::(value=0x58, bits=32) ]
[Expr::addChild]  this = 0x2334f60, addChild = [ Add[0x231d610]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) ]
[registerExpression] :: Equal[0x2334f60, isConcrete=false]::(Constant[0x22a7cb0]::(value=0x58, bits=32), Add[0x231d610]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))))

Push Path Constrain 0x2334f60 : {
	Equal[0x2334f60, isConcrete=false]::(Constant[0x22a7cb0]::(value=0x58, bits=32), Add[0x231d610]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))))
}

====================== Start negating path for the pushed constraint =============================
Equal[0x2334f60, isConcrete=false]::(Constant[0x22a7cb0]::(value=0x58, bits=32), Add[0x231d610]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))))
====================== Start negating path for the pushed constraint =============================


[Solver::addJcc] isInteresting=true
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x2334f60 [
	Equal[0x2334f60, isConcrete=false]::(Constant[0x22a7cb0]::(value=0x58, bits=32), Add[0x231d610]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))))
] with Symbolic Dependencies = [ 5 9  ]
[DepForest] Trying to find or create DepTree for index=5
[DepForest] Trying to find or create DepTree for index=9



FOR TREE 0x2237950 :: SYMDEP [ 5 ], CONCRETE DEP [ 0 1 2 3 4 6 7 8 ]

[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x229db80 [
	Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=true]::(bits=32, Read[0x22430f0, isConcrete=true]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=false]::(bits=32, Read[0x2242f80, isConcrete=false]::(index=4, bits=8)))))
] with Dependencies = [ 0 1 3 4 5  ]
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22aaa00 [
	Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))))
] with Dependencies = [ 1 2 4 5 6  ]
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22bbd20 [
	Slt[0x22bbd20, isConcrete=false]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=false]::(bits=32, Read[0x22433d0, isConcrete=false]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)))))
] with Dependencies = [ 2 3 5 6 7  ]
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22aa2c0 [
	Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))
] with Dependencies = [ 5 7  ]
[Expr::addChild]  this = 0x2335160, addChild = [ Constant[0x2359500]::(value=0x52, bits=32) ]
[Expr::addChild]  this = 0x2335160, addChild = [ Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) ]
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22df870 [
	Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8)))
] with Dependencies = [ 4 8  ]


FOR TREE 0x22fdfd0 :: SYMDEP [ 5 ], CONCRETE DEP [ 0 1 2 3 4 6 7 8 ]

[STAT] SMT: {"solving_time_elapsed": 679 }
[DEBUG] 
Solver Model z3::sat :: {; 
(set-info :status unknown)
(declare-fun k!50 () (_ BitVec 8))
(declare-fun k!90 () (_ BitVec 8))
(assert
 (let ((?x31 ((_ extract 7 7) k!50)))
 (let ((?x1371 (concat ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 k!50)))
 (not (bvsle (bvadd (_ bv132 32) ?x1371) (_ bv132 32))))))
(assert
 (let ((?x31 ((_ extract 7 7) k!50)))
 (let ((?x1371 (concat ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 k!50)))
 (not (bvsle (bvadd (_ bv132 32) ?x1371) (_ bv132 32))))))
(assert
 (let ((?x31 ((_ extract 7 7) k!50)))
 (let ((?x1371 (concat ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 k!50)))
 (not (bvsle (bvadd (_ bv128 32) ?x1371) (_ bv132 32))))))
(assert
 (and (= k!50 (_ bv20 8)) (= ((_ extract 7 7) k!50) (_ bv0 1))))
(assert
 (let ((?x3070 ((_ extract 7 7) k!90)))
 (let ((?x3007 (concat ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 ?x3070 k!90)))
 (let ((?x31 ((_ extract 7 7) k!50)))
 (let ((?x1371 (concat ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 ?x31 k!50)))
 (= ?x1371 (bvadd (_ bv88 32) (bvmul (_ bv4294967295 32) ?x3007))))))))
(check-sat)

}
[INFO] New testcase: sanjay1_loop/000007
[QSYM::Solver] Add Constraint 0x231d610 :: [ Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) ] into DepForest=0x221d668
[DepForest] Trying to find or create DepTree for index=5
[DepForest] Trying to find or create DepTree for index=9
[DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
[Solver::addJcc] DepForest after negating path and adding constraint to the solver:
================== [DepForest] This=0x221d668,size=20 : [
ForestTreeIdx=0 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=1 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=2 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=3 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=4 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=5 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=6 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=7 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=8 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=9 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=10 DT=0
ForestTreeIdx=11 DT=0
ForestTreeIdx=12 DT=0
ForestTreeIdx=13 DT=0
ForestTreeIdx=14 DT=0
ForestTreeIdx=15 [DepTree] This=0x22b22f0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) :: [ 15 18  ],
	]
	set = [ 15 18 19 ]
]
ForestTreeIdx=16 DT=0
ForestTreeIdx=17 DT=0
ForestTreeIdx=18 [DepTree] This=0x22b22f0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) :: [ 15 18  ],
	]
	set = [ 15 18 19 ]
]
ForestTreeIdx=19 [DepTree] This=0x22b22f0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) :: [ 15 18  ],
	]
	set = [ 15 18 19 ]
]
]
====================== FOREST STATISTICS =========================
 Unique Trees        : 2
 Allocated Trees     : 20
 Sparse Idx          : 0.1
 Forest Dependencies : 13 [ 0 1 2 3 4 5 6 7 8 9 15 18 19 ]
==================================================================
====================== End negating path for the pushed constraint =============================
Equal[0x2334f60, isConcrete=false]::(Constant[0x22a7cb0]::(value=0x58, bits=32), Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))))
====================== End negating path for the pushed constraint =============================


===================== ALLOCATED EXPRESSIONS STATS : 71 =====================
IDX=0 :: Constant[0x220e430]::(value=0x55, bits=32) :: DepsSize=0 [ ]
IDX=1 :: Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) :: DepsSize=2 [ 3 4 ]
IDX=2 :: Read[0x2228a90, isConcrete=true]::(index=0, bits=8) :: DepsSize=1 [ 0 ]
IDX=3 :: Equal[0x222b1d0, isConcrete=false]::(Constant[0x2327b20]::(value=0x62, bits=32), Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8)))) :: DepsSize=2 [ 18 19 ]
IDX=4 :: SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)) :: DepsSize=1 [ 4 ]
IDX=5 :: SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8)) :: DepsSize=1 [ 3 ]
IDX=6 :: Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) :: DepsSize=2 [ 0 1 ]
IDX=7 :: SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8)) :: DepsSize=1 [ 1 ]
IDX=8 :: SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8)) :: DepsSize=1 [ 0 ]
IDX=9 :: Read[0x2242b40, isConcrete=true]::(index=1, bits=8) :: DepsSize=1 [ 1 ]
IDX=10 :: Read[0x2242c80, isConcrete=true]::(index=2, bits=8) :: DepsSize=1 [ 2 ]
IDX=11 :: Read[0x2242d80, isConcrete=true]::(index=3, bits=8) :: DepsSize=1 [ 3 ]
IDX=12 :: Read[0x2242f80, isConcrete=true]::(index=4, bits=8) :: DepsSize=1 [ 4 ]
IDX=13 :: Read[0x22430f0, isConcrete=false]::(index=5, bits=8) :: DepsSize=1 [ 5 ]
IDX=14 :: Read[0x2243260, isConcrete=true]::(index=6, bits=8) :: DepsSize=1 [ 6 ]
IDX=15 :: Read[0x22433d0, isConcrete=true]::(index=7, bits=8) :: DepsSize=1 [ 7 ]
IDX=16 :: Read[0x229b600, isConcrete=false]::(index=8, bits=8) :: DepsSize=1 [ 8 ]
IDX=17 :: Read[0x229b740, isConcrete=false]::(index=9, bits=8) :: DepsSize=1 [ 9 ]
IDX=18 :: Read[0x229b880, isConcrete=false]::(index=a, bits=8) :: DepsSize=1 [ 10 ]
IDX=19 :: Read[0x229b9f0, isConcrete=false]::(index=b, bits=8) :: DepsSize=1 [ 11 ]
IDX=20 :: Read[0x229bb60, isConcrete=false]::(index=c, bits=8) :: DepsSize=1 [ 12 ]
IDX=21 :: Read[0x229bcd0, isConcrete=false]::(index=d, bits=8) :: DepsSize=1 [ 13 ]
IDX=22 :: Read[0x229be40, isConcrete=false]::(index=e, bits=8) :: DepsSize=1 [ 14 ]
IDX=23 :: Read[0x229bfb0, isConcrete=false]::(index=f, bits=8) :: DepsSize=1 [ 15 ]
IDX=24 :: Read[0x229c120, isConcrete=false]::(index=10, bits=8) :: DepsSize=1 [ 16 ]
IDX=25 :: Read[0x229c290, isConcrete=false]::(index=11, bits=8) :: DepsSize=1 [ 17 ]
IDX=26 :: Read[0x229c400, isConcrete=false]::(index=12, bits=8) :: DepsSize=1 [ 18 ]
IDX=27 :: Read[0x229c570, isConcrete=true]::(index=13, bits=8) :: DepsSize=1 [ 19 ]
IDX=28 :: Read[0x229c6e0, isConcrete=false]::(index=14, bits=8) :: DepsSize=1 [ 20 ]
IDX=29 :: Read[0x229c850, isConcrete=false]::(index=15, bits=8) :: DepsSize=1 [ 21 ]
IDX=30 :: Read[0x229c9c0, isConcrete=false]::(index=16, bits=8) :: DepsSize=1 [ 22 ]
IDX=31 :: Read[0x229cb30, isConcrete=false]::(index=17, bits=8) :: DepsSize=1 [ 23 ]
IDX=32 :: Read[0x229cca0, isConcrete=false]::(index=18, bits=8) :: DepsSize=1 [ 24 ]
IDX=33 :: Read[0x229ce10, isConcrete=false]::(index=19, bits=8) :: DepsSize=1 [ 25 ]
IDX=34 :: Read[0x229cf80, isConcrete=false]::(index=1a, bits=8) :: DepsSize=1 [ 26 ]
IDX=35 :: Read[0x229d0f0, isConcrete=false]::(index=1b, bits=8) :: DepsSize=1 [ 27 ]
IDX=36 :: SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)) :: DepsSize=1 [ 5 ]
IDX=37 :: Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)))) :: DepsSize=3 [ 3 4 5 ]
IDX=38 :: Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: DepsSize=5 [ 0 1 3 4 5 ]
IDX=39 :: Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) :: DepsSize=2 [ 1 2 ]
IDX=40 :: SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8)) :: DepsSize=1 [ 18 ]
IDX=41 :: Constant[0x22a7cb0]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=42 :: Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: DepsSize=2 [ 5 7 ]
IDX=43 :: Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: DepsSize=5 [ 1 2 4 5 6 ]
IDX=44 :: Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) :: DepsSize=3 [ 4 5 6 ]
IDX=45 :: Constant[0x22ad410]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=46 :: SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8)) :: DepsSize=1 [ 8 ]
IDX=47 :: SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8)) :: DepsSize=1 [ 7 ]
IDX=48 :: SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)) :: DepsSize=1 [ 6 ]
IDX=49 :: Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: DepsSize=5 [ 2 3 5 6 7 ]
IDX=50 :: Equal[0x22bbe00, isConcrete=false]::(Constant[0x220e430]::(value=0x55, bits=32), Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8)))) :: DepsSize=2 [ 15 18 ]
IDX=51 :: Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: DepsSize=2 [ 4 5 ]
IDX=52 :: Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)))) :: DepsSize=3 [ 5 6 7 ]
IDX=53 :: Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: DepsSize=2 [ 4 8 ]
IDX=54 :: SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8)) :: DepsSize=1 [ 19 ]
IDX=55 :: SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8)) :: DepsSize=1 [ 2 ]
IDX=56 :: Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: DepsSize=2 [ 18 19 ]
IDX=57 :: Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) :: DepsSize=2 [ 2 3 ]
IDX=58 :: Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) :: DepsSize=2 [ 5 6 ]
IDX=59 :: Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) :: DepsSize=2 [ 15 18 ]
IDX=60 :: Constant[0x22fd890]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=61 :: Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) :: DepsSize=2 [ 2 4 ]
IDX=62 :: SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8)) :: DepsSize=1 [ 15 ]
IDX=63 :: Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: DepsSize=2 [ 5 9 ]
IDX=64 :: Constant[0x2327b20]::(value=0x62, bits=32) :: DepsSize=0 [ ]
IDX=65 :: Equal[0x232c7a0, isConcrete=false]::(Constant[0x2370120]::(value=0x52, bits=32), Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) :: DepsSize=2 [ 5 7 ]
IDX=66 :: Equal[0x2334f60, isConcrete=false]::(Constant[0x22a7cb0]::(value=0x58, bits=32), Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8)))) :: DepsSize=2 [ 5 9 ]
IDX=67 :: SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8)) :: DepsSize=1 [ 9 ]
IDX=68 :: Constant[0x2370120]::(value=0x52, bits=32) :: DepsSize=0 [ ]
IDX=69 :: Equal[0x23701e0, isConcrete=true]::(Constant[0x22fd890]::(value=0x58, bits=32), Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)))) :: DepsSize=2 [ 2 4 ]
IDX=70 :: Equal[0x23a69a0, isConcrete=false]::(Constant[0x22ad410]::(value=0x58, bits=32), Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8)))) :: DepsSize=2 [ 4 8 ]
===================== ALLOCATED EXPRESSIONS STATS =====================

Reading 1 bytes from address 0x7ffd072e5cdb
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x234f910, addChild = [ Read[0x229b9f0, isConcrete=false]::(index=b, bits=8) ]
[registerExpression] :: SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))
Reading 1 bytes from address 0x7ffd072e5ce8
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x234f860, addChild = [ Read[0x229cca0, isConcrete=false]::(index=18, bits=8) ]
[registerExpression] :: SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))
[Expr::addChild]  this = 0x22f70e0, addChild = [ SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8)) ]
[Expr::addChild]  this = 0x22f70e0, addChild = [ SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8)) ]
[registerExpression] :: Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8)))
[registerExpression] :: Constant[0x23a6240]::(value=0x58, bits=32)
[Expr::addChild]  this = 0x2310e30, addChild = [ Constant[0x23a6240]::(value=0x58, bits=32) ]
[Expr::addChild]  this = 0x2310e30, addChild = [ Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))) ]
[registerExpression] :: Equal[0x2310e30, isConcrete=false]::(Constant[0x23a6240]::(value=0x58, bits=32), Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))))

Push Path Constrain 0x2310e30 : {
	Equal[0x2310e30, isConcrete=false]::(Constant[0x23a6240]::(value=0x58, bits=32), Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))))
}

====================== Start negating path for the pushed constraint =============================
Equal[0x2310e30, isConcrete=false]::(Constant[0x23a6240]::(value=0x58, bits=32), Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))))
====================== Start negating path for the pushed constraint =============================


[Solver::addJcc] isInteresting=true
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x2310e30 [
	Equal[0x2310e30, isConcrete=false]::(Constant[0x23a6240]::(value=0x58, bits=32), Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))))
] with Symbolic Dependencies = [ 11 24  ]
[DepForest] Trying to find or create DepTree for index=11
[DepForest] Trying to find or create DepTree for index=24



FOR TREE 0x22a9f10 :: SYMDEP [ ], CONCRETE DEP [ ]



FOR TREE 0x239f030 :: SYMDEP [ ], CONCRETE DEP [ ]

[STAT] SMT: {"solving_time_elapsed": 1081 }
[DEBUG] 
Solver Model z3::sat :: {; 
(set-info :status unknown)
(declare-fun k!240 () (_ BitVec 8))
(declare-fun k!110 () (_ BitVec 8))
(assert
 (let ((?x1711 ((_ extract 7 7) k!240)))
 (let ((?x657 (concat ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 k!240)))
 (let ((?x153 ((_ extract 7 7) k!110)))
 (let ((?x251 (concat ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 ?x153 k!110)))
 (= ?x251 (bvadd (_ bv88 32) (bvmul (_ bv4294967295 32) ?x657))))))))
(check-sat)

}
[INFO] New testcase: sanjay1_loop/000008
[QSYM::Solver] Add Constraint 0x22f70e0 :: [ Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))) ] into DepForest=0x221d668
[DepForest] Trying to find or create DepTree for index=11
[DepForest] Trying to find or create DepTree for index=24
[DepTree] This=0x22a9f10, [ 
	nodes = [
		Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))) :: [ 11 24  ],
	]
	set = [ 11 24 ]
]
[Solver::addJcc] DepForest after negating path and adding constraint to the solver:
================== [DepForest] This=0x221d668,size=25 : [
ForestTreeIdx=0 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=1 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=2 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=3 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=4 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=5 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=6 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=7 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=8 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=9 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=10 DT=0
ForestTreeIdx=11 [DepTree] This=0x22a9f10, [ 
	nodes = [
		Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))) :: [ 11 24  ],
	]
	set = [ 11 24 ]
]
ForestTreeIdx=12 DT=0
ForestTreeIdx=13 DT=0
ForestTreeIdx=14 DT=0
ForestTreeIdx=15 [DepTree] This=0x22b22f0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) :: [ 15 18  ],
	]
	set = [ 15 18 19 ]
]
ForestTreeIdx=16 DT=0
ForestTreeIdx=17 DT=0
ForestTreeIdx=18 [DepTree] This=0x22b22f0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) :: [ 15 18  ],
	]
	set = [ 15 18 19 ]
]
ForestTreeIdx=19 [DepTree] This=0x22b22f0, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) :: [ 15 18  ],
	]
	set = [ 15 18 19 ]
]
ForestTreeIdx=20 DT=0
ForestTreeIdx=21 DT=0
ForestTreeIdx=22 DT=0
ForestTreeIdx=23 DT=0
ForestTreeIdx=24 [DepTree] This=0x22a9f10, [ 
	nodes = [
		Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))) :: [ 11 24  ],
	]
	set = [ 11 24 ]
]
]
====================== FOREST STATISTICS =========================
 Unique Trees        : 3
 Allocated Trees     : 25
 Sparse Idx          : 0.12
 Forest Dependencies : 15 [ 0 1 2 3 4 5 6 7 8 9 11 15 18 19 24 ]
==================================================================
====================== End negating path for the pushed constraint =============================
Equal[0x2310e30, isConcrete=false]::(Constant[0x23a6240]::(value=0x58, bits=32), Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))))
====================== End negating path for the pushed constraint =============================


===================== ALLOCATED EXPRESSIONS STATS : 76 =====================
IDX=0 :: Constant[0x220e430]::(value=0x55, bits=32) :: DepsSize=0 [ ]
IDX=1 :: Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) :: DepsSize=2 [ 3 4 ]
IDX=2 :: Read[0x2228a90, isConcrete=true]::(index=0, bits=8) :: DepsSize=1 [ 0 ]
IDX=3 :: Equal[0x222b1d0, isConcrete=false]::(Constant[0x2327b20]::(value=0x62, bits=32), Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8)))) :: DepsSize=2 [ 18 19 ]
IDX=4 :: SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)) :: DepsSize=1 [ 4 ]
IDX=5 :: SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8)) :: DepsSize=1 [ 3 ]
IDX=6 :: Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) :: DepsSize=2 [ 0 1 ]
IDX=7 :: SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8)) :: DepsSize=1 [ 1 ]
IDX=8 :: SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8)) :: DepsSize=1 [ 0 ]
IDX=9 :: Read[0x2242b40, isConcrete=true]::(index=1, bits=8) :: DepsSize=1 [ 1 ]
IDX=10 :: Read[0x2242c80, isConcrete=true]::(index=2, bits=8) :: DepsSize=1 [ 2 ]
IDX=11 :: Read[0x2242d80, isConcrete=true]::(index=3, bits=8) :: DepsSize=1 [ 3 ]
IDX=12 :: Read[0x2242f80, isConcrete=true]::(index=4, bits=8) :: DepsSize=1 [ 4 ]
IDX=13 :: Read[0x22430f0, isConcrete=false]::(index=5, bits=8) :: DepsSize=1 [ 5 ]
IDX=14 :: Read[0x2243260, isConcrete=true]::(index=6, bits=8) :: DepsSize=1 [ 6 ]
IDX=15 :: Read[0x22433d0, isConcrete=true]::(index=7, bits=8) :: DepsSize=1 [ 7 ]
IDX=16 :: Read[0x229b600, isConcrete=false]::(index=8, bits=8) :: DepsSize=1 [ 8 ]
IDX=17 :: Read[0x229b740, isConcrete=false]::(index=9, bits=8) :: DepsSize=1 [ 9 ]
IDX=18 :: Read[0x229b880, isConcrete=false]::(index=a, bits=8) :: DepsSize=1 [ 10 ]
IDX=19 :: Read[0x229b9f0, isConcrete=false]::(index=b, bits=8) :: DepsSize=1 [ 11 ]
IDX=20 :: Read[0x229bb60, isConcrete=false]::(index=c, bits=8) :: DepsSize=1 [ 12 ]
IDX=21 :: Read[0x229bcd0, isConcrete=false]::(index=d, bits=8) :: DepsSize=1 [ 13 ]
IDX=22 :: Read[0x229be40, isConcrete=false]::(index=e, bits=8) :: DepsSize=1 [ 14 ]
IDX=23 :: Read[0x229bfb0, isConcrete=false]::(index=f, bits=8) :: DepsSize=1 [ 15 ]
IDX=24 :: Read[0x229c120, isConcrete=false]::(index=10, bits=8) :: DepsSize=1 [ 16 ]
IDX=25 :: Read[0x229c290, isConcrete=false]::(index=11, bits=8) :: DepsSize=1 [ 17 ]
IDX=26 :: Read[0x229c400, isConcrete=false]::(index=12, bits=8) :: DepsSize=1 [ 18 ]
IDX=27 :: Read[0x229c570, isConcrete=true]::(index=13, bits=8) :: DepsSize=1 [ 19 ]
IDX=28 :: Read[0x229c6e0, isConcrete=false]::(index=14, bits=8) :: DepsSize=1 [ 20 ]
IDX=29 :: Read[0x229c850, isConcrete=false]::(index=15, bits=8) :: DepsSize=1 [ 21 ]
IDX=30 :: Read[0x229c9c0, isConcrete=false]::(index=16, bits=8) :: DepsSize=1 [ 22 ]
IDX=31 :: Read[0x229cb30, isConcrete=false]::(index=17, bits=8) :: DepsSize=1 [ 23 ]
IDX=32 :: Read[0x229cca0, isConcrete=false]::(index=18, bits=8) :: DepsSize=1 [ 24 ]
IDX=33 :: Read[0x229ce10, isConcrete=false]::(index=19, bits=8) :: DepsSize=1 [ 25 ]
IDX=34 :: Read[0x229cf80, isConcrete=false]::(index=1a, bits=8) :: DepsSize=1 [ 26 ]
IDX=35 :: Read[0x229d0f0, isConcrete=false]::(index=1b, bits=8) :: DepsSize=1 [ 27 ]
IDX=36 :: SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)) :: DepsSize=1 [ 5 ]
IDX=37 :: Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)))) :: DepsSize=3 [ 3 4 5 ]
IDX=38 :: Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: DepsSize=5 [ 0 1 3 4 5 ]
IDX=39 :: Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) :: DepsSize=2 [ 1 2 ]
IDX=40 :: SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8)) :: DepsSize=1 [ 18 ]
IDX=41 :: Constant[0x22a7cb0]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=42 :: Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: DepsSize=2 [ 5 7 ]
IDX=43 :: Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: DepsSize=5 [ 1 2 4 5 6 ]
IDX=44 :: Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) :: DepsSize=3 [ 4 5 6 ]
IDX=45 :: Constant[0x22ad410]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=46 :: SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8)) :: DepsSize=1 [ 8 ]
IDX=47 :: SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8)) :: DepsSize=1 [ 7 ]
IDX=48 :: SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)) :: DepsSize=1 [ 6 ]
IDX=49 :: Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: DepsSize=5 [ 2 3 5 6 7 ]
IDX=50 :: Equal[0x22bbe00, isConcrete=false]::(Constant[0x220e430]::(value=0x55, bits=32), Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8)))) :: DepsSize=2 [ 15 18 ]
IDX=51 :: Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: DepsSize=2 [ 4 5 ]
IDX=52 :: Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)))) :: DepsSize=3 [ 5 6 7 ]
IDX=53 :: Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: DepsSize=2 [ 4 8 ]
IDX=54 :: SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8)) :: DepsSize=1 [ 19 ]
IDX=55 :: SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8)) :: DepsSize=1 [ 2 ]
IDX=56 :: Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: DepsSize=2 [ 18 19 ]
IDX=57 :: Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) :: DepsSize=2 [ 2 3 ]
IDX=58 :: Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) :: DepsSize=2 [ 5 6 ]
IDX=59 :: Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))) :: DepsSize=2 [ 11 24 ]
IDX=60 :: Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) :: DepsSize=2 [ 15 18 ]
IDX=61 :: Constant[0x22fd890]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=62 :: Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) :: DepsSize=2 [ 2 4 ]
IDX=63 :: SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8)) :: DepsSize=1 [ 15 ]
IDX=64 :: Equal[0x2310e30, isConcrete=false]::(Constant[0x23a6240]::(value=0x58, bits=32), Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8)))) :: DepsSize=2 [ 11 24 ]
IDX=65 :: Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: DepsSize=2 [ 5 9 ]
IDX=66 :: Constant[0x2327b20]::(value=0x62, bits=32) :: DepsSize=0 [ ]
IDX=67 :: Equal[0x232c7a0, isConcrete=false]::(Constant[0x2370120]::(value=0x52, bits=32), Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) :: DepsSize=2 [ 5 7 ]
IDX=68 :: Equal[0x2334f60, isConcrete=false]::(Constant[0x22a7cb0]::(value=0x58, bits=32), Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8)))) :: DepsSize=2 [ 5 9 ]
IDX=69 :: SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8)) :: DepsSize=1 [ 24 ]
IDX=70 :: SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8)) :: DepsSize=1 [ 11 ]
IDX=71 :: SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8)) :: DepsSize=1 [ 9 ]
IDX=72 :: Constant[0x2370120]::(value=0x52, bits=32) :: DepsSize=0 [ ]
IDX=73 :: Equal[0x23701e0, isConcrete=true]::(Constant[0x22fd890]::(value=0x58, bits=32), Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)))) :: DepsSize=2 [ 2 4 ]
IDX=74 :: Constant[0x23a6240]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=75 :: Equal[0x23a69a0, isConcrete=false]::(Constant[0x22ad410]::(value=0x58, bits=32), Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8)))) :: DepsSize=2 [ 4 8 ]
===================== ALLOCATED EXPRESSIONS STATS =====================

Reading 1 bytes from address 0x7ffd072e5cdf
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x2317710, addChild = [ Read[0x229bfb0, isConcrete=false]::(index=f, bits=8) ]
[registerExpression] :: SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))
Reading 1 bytes from address 0x7ffd072e5cde
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
[Expr::addChild]  this = 0x22e5a80, addChild = [ Read[0x229be40, isConcrete=false]::(index=e, bits=8) ]
[registerExpression] :: SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8))
[Expr::addChild]  this = 0x23171d0, addChild = [ SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8)) ]
[Expr::addChild]  this = 0x23171d0, addChild = [ SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8)) ]
[registerExpression] :: Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8)))
[registerExpression] :: Constant[0x22f0870]::(value=0x67, bits=32)
[Expr::addChild]  this = 0x2354070, addChild = [ Constant[0x22f0870]::(value=0x67, bits=32) ]
[Expr::addChild]  this = 0x2354070, addChild = [ Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8))) ]
[registerExpression] :: Equal[0x2354070, isConcrete=false]::(Constant[0x22f0870]::(value=0x67, bits=32), Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8))))

Push Path Constrain 0x2354070 : {
	Equal[0x2354070, isConcrete=false]::(Constant[0x22f0870]::(value=0x67, bits=32), Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8))))
}

====================== Start negating path for the pushed constraint =============================
Equal[0x2354070, isConcrete=false]::(Constant[0x22f0870]::(value=0x67, bits=32), Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8))))
====================== Start negating path for the pushed constraint =============================


[Solver::addJcc] isInteresting=true
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x2354070 [
	Equal[0x2354070, isConcrete=false]::(Constant[0x22f0870]::(value=0x67, bits=32), Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8))))
] with Symbolic Dependencies = [ 14 15  ]
[DepForest] Trying to find or create DepTree for index=14
[DepForest] Trying to find or create DepTree for index=15



FOR TREE 0x22b22f0 :: SYMDEP [ 15 ], CONCRETE DEP [ 18 19 ]

[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22f00f0 [
	Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8)))
] with Dependencies = [ 18 19  ]
[QSYM::Solver] syncConstraints for ExpRef(qsym::Expr)=0x22fcf40 [
	Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8)))
] with Dependencies = [ 15 18  ]
[Expr::addChild]  this = 0x22f42d0, addChild = [ Constant[0x22a5110]::(value=0x55, bits=32) ]
[Expr::addChild]  this = 0x22f42d0, addChild = [ Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=false]::(bits=32, Read[0x229c400, isConcrete=false]::(index=12, bits=8))) ]


FOR TREE 0x23a3b60 :: SYMDEP [ 15 ], CONCRETE DEP [ 18 19 ]

[STAT] SMT: {"solving_time_elapsed": 526 }
[DEBUG] 
Solver Model z3::sat :: {; 
(set-info :status unknown)
(declare-fun k!150 () (_ BitVec 8))
(declare-fun k!140 () (_ BitVec 8))
(assert
 (and (= k!150 (_ bv52 8)) (= ((_ extract 7 7) k!150) (_ bv0 1))))
(assert
 (let ((?x2990 ((_ extract 7 7) k!140)))
 (let ((?x551 (concat ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 ?x2990 k!140)))
 (let ((?x1711 ((_ extract 7 7) k!150)))
 (let ((?x2593 (concat ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 ?x1711 k!150)))
 (= ?x2593 (bvadd (_ bv103 32) (bvmul (_ bv4294967295 32) ?x551))))))))
(check-sat)

}
[INFO] New testcase: sanjay1_loop/000009
[QSYM::Solver] Add Constraint 0x23171d0 :: [ Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8))) ] into DepForest=0x221d668
[DepForest] Trying to find or create DepTree for index=14
[DepForest] Trying to find or create DepTree for index=15
[DepTree] This=0x23a3b60, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8))) :: [ 15 18  ],
		Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8))) :: [ 14 15  ],
	]
	set = [ 14 15 18 19 ]
]
[Solver::addJcc] DepForest after negating path and adding constraint to the solver:
================== [DepForest] This=0x221d668,size=25 : [
ForestTreeIdx=0 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=1 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=2 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=3 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=4 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=5 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=6 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=7 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=8 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=9 [DepTree] This=0x2237950, [ 
	nodes = [
		Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: [ 0 1 3 4 5  ],
		Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: [ 1 2 4 5 6  ],
		Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: [ 2 3 5 6 7  ],
		Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: [ 5 7  ],
		Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: [ 4 8  ],
		Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: [ 5 9  ],
	]
	set = [ 0 1 2 3 4 5 6 7 8 9 ]
]
ForestTreeIdx=10 DT=0
ForestTreeIdx=11 [DepTree] This=0x22a9f10, [ 
	nodes = [
		Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))) :: [ 11 24  ],
	]
	set = [ 11 24 ]
]
ForestTreeIdx=12 DT=0
ForestTreeIdx=13 DT=0
ForestTreeIdx=14 [DepTree] This=0x23a3b60, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8))) :: [ 15 18  ],
		Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8))) :: [ 14 15  ],
	]
	set = [ 14 15 18 19 ]
]
ForestTreeIdx=15 [DepTree] This=0x23a3b60, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8))) :: [ 15 18  ],
		Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8))) :: [ 14 15  ],
	]
	set = [ 14 15 18 19 ]
]
ForestTreeIdx=16 DT=0
ForestTreeIdx=17 DT=0
ForestTreeIdx=18 [DepTree] This=0x23a3b60, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8))) :: [ 15 18  ],
		Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8))) :: [ 14 15  ],
	]
	set = [ 14 15 18 19 ]
]
ForestTreeIdx=19 [DepTree] This=0x23a3b60, [ 
	nodes = [
		Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: [ 18 19  ],
		Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8))) :: [ 15 18  ],
		Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8))) :: [ 14 15  ],
	]
	set = [ 14 15 18 19 ]
]
ForestTreeIdx=20 DT=0
ForestTreeIdx=21 DT=0
ForestTreeIdx=22 DT=0
ForestTreeIdx=23 DT=0
ForestTreeIdx=24 [DepTree] This=0x22a9f10, [ 
	nodes = [
		Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))) :: [ 11 24  ],
	]
	set = [ 11 24 ]
]
]
====================== FOREST STATISTICS =========================
 Unique Trees        : 3
 Allocated Trees     : 25
 Sparse Idx          : 0.12
 Forest Dependencies : 16 [ 0 1 2 3 4 5 6 7 8 9 11 14 15 18 19 24 ]
==================================================================
====================== End negating path for the pushed constraint =============================
Equal[0x2354070, isConcrete=false]::(Constant[0x22f0870]::(value=0x67, bits=32), Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8))))
====================== End negating path for the pushed constraint =============================


===================== ALLOCATED EXPRESSIONS STATS : 80 =====================
IDX=0 :: Constant[0x220e430]::(value=0x55, bits=32) :: DepsSize=0 [ ]
IDX=1 :: Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) :: DepsSize=2 [ 3 4 ]
IDX=2 :: Read[0x2228a90, isConcrete=true]::(index=0, bits=8) :: DepsSize=1 [ 0 ]
IDX=3 :: Equal[0x222b1d0, isConcrete=true]::(Constant[0x2327b20]::(value=0x62, bits=32), Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8)))) :: DepsSize=2 [ 18 19 ]
IDX=4 :: SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)) :: DepsSize=1 [ 4 ]
IDX=5 :: SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8)) :: DepsSize=1 [ 3 ]
IDX=6 :: Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) :: DepsSize=2 [ 0 1 ]
IDX=7 :: SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8)) :: DepsSize=1 [ 1 ]
IDX=8 :: SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8)) :: DepsSize=1 [ 0 ]
IDX=9 :: Read[0x2242b40, isConcrete=true]::(index=1, bits=8) :: DepsSize=1 [ 1 ]
IDX=10 :: Read[0x2242c80, isConcrete=true]::(index=2, bits=8) :: DepsSize=1 [ 2 ]
IDX=11 :: Read[0x2242d80, isConcrete=true]::(index=3, bits=8) :: DepsSize=1 [ 3 ]
IDX=12 :: Read[0x2242f80, isConcrete=true]::(index=4, bits=8) :: DepsSize=1 [ 4 ]
IDX=13 :: Read[0x22430f0, isConcrete=false]::(index=5, bits=8) :: DepsSize=1 [ 5 ]
IDX=14 :: Read[0x2243260, isConcrete=true]::(index=6, bits=8) :: DepsSize=1 [ 6 ]
IDX=15 :: Read[0x22433d0, isConcrete=true]::(index=7, bits=8) :: DepsSize=1 [ 7 ]
IDX=16 :: Read[0x229b600, isConcrete=false]::(index=8, bits=8) :: DepsSize=1 [ 8 ]
IDX=17 :: Read[0x229b740, isConcrete=false]::(index=9, bits=8) :: DepsSize=1 [ 9 ]
IDX=18 :: Read[0x229b880, isConcrete=false]::(index=a, bits=8) :: DepsSize=1 [ 10 ]
IDX=19 :: Read[0x229b9f0, isConcrete=false]::(index=b, bits=8) :: DepsSize=1 [ 11 ]
IDX=20 :: Read[0x229bb60, isConcrete=false]::(index=c, bits=8) :: DepsSize=1 [ 12 ]
IDX=21 :: Read[0x229bcd0, isConcrete=false]::(index=d, bits=8) :: DepsSize=1 [ 13 ]
IDX=22 :: Read[0x229be40, isConcrete=false]::(index=e, bits=8) :: DepsSize=1 [ 14 ]
IDX=23 :: Read[0x229bfb0, isConcrete=false]::(index=f, bits=8) :: DepsSize=1 [ 15 ]
IDX=24 :: Read[0x229c120, isConcrete=false]::(index=10, bits=8) :: DepsSize=1 [ 16 ]
IDX=25 :: Read[0x229c290, isConcrete=false]::(index=11, bits=8) :: DepsSize=1 [ 17 ]
IDX=26 :: Read[0x229c400, isConcrete=true]::(index=12, bits=8) :: DepsSize=1 [ 18 ]
IDX=27 :: Read[0x229c570, isConcrete=true]::(index=13, bits=8) :: DepsSize=1 [ 19 ]
IDX=28 :: Read[0x229c6e0, isConcrete=false]::(index=14, bits=8) :: DepsSize=1 [ 20 ]
IDX=29 :: Read[0x229c850, isConcrete=false]::(index=15, bits=8) :: DepsSize=1 [ 21 ]
IDX=30 :: Read[0x229c9c0, isConcrete=false]::(index=16, bits=8) :: DepsSize=1 [ 22 ]
IDX=31 :: Read[0x229cb30, isConcrete=false]::(index=17, bits=8) :: DepsSize=1 [ 23 ]
IDX=32 :: Read[0x229cca0, isConcrete=false]::(index=18, bits=8) :: DepsSize=1 [ 24 ]
IDX=33 :: Read[0x229ce10, isConcrete=false]::(index=19, bits=8) :: DepsSize=1 [ 25 ]
IDX=34 :: Read[0x229cf80, isConcrete=false]::(index=1a, bits=8) :: DepsSize=1 [ 26 ]
IDX=35 :: Read[0x229d0f0, isConcrete=false]::(index=1b, bits=8) :: DepsSize=1 [ 27 ]
IDX=36 :: SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)) :: DepsSize=1 [ 5 ]
IDX=37 :: Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)))) :: DepsSize=3 [ 3 4 5 ]
IDX=38 :: Slt[0x229db80, isConcrete=true]::(Add[0x22378a0]::(SExt[0x2237d70, isConcrete=true]::(bits=32, Read[0x2228a90, isConcrete=true]::(index=0, bits=8))) + (SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))), Add[0x229d9d0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (Add[0x2214c70]::(SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))))) :: DepsSize=5 [ 0 1 3 4 5 ]
IDX=39 :: Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) :: DepsSize=2 [ 1 2 ]
IDX=40 :: SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8)) :: DepsSize=1 [ 18 ]
IDX=41 :: Constant[0x22a7cb0]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=42 :: Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: DepsSize=2 [ 5 7 ]
IDX=43 :: Slt[0x22aaa00, isConcrete=true]::(Add[0x22a5ba0]::(SExt[0x2237cc0, isConcrete=true]::(bits=32, Read[0x2242b40, isConcrete=true]::(index=1, bits=8))) + (SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))), Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))))) :: DepsSize=5 [ 1 2 4 5 6 ]
IDX=44 :: Add[0x22ab320]::(SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) + (Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) :: DepsSize=3 [ 4 5 6 ]
IDX=45 :: Constant[0x22ad410]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=46 :: SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8)) :: DepsSize=1 [ 8 ]
IDX=47 :: SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8)) :: DepsSize=1 [ 7 ]
IDX=48 :: SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)) :: DepsSize=1 [ 6 ]
IDX=49 :: Slt[0x22bbd20, isConcrete=true]::(Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))), Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))))) :: DepsSize=5 [ 2 3 5 6 7 ]
IDX=50 :: Equal[0x22bbe00, isConcrete=false]::(Constant[0x220e430]::(value=0x55, bits=32), Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8)))) :: DepsSize=2 [ 15 18 ]
IDX=51 :: Add[0x22bd4c0]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) :: DepsSize=2 [ 4 5 ]
IDX=52 :: Add[0x22df600]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8)))) :: DepsSize=3 [ 5 6 7 ]
IDX=53 :: Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8))) :: DepsSize=2 [ 4 8 ]
IDX=54 :: SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8)) :: DepsSize=1 [ 19 ]
IDX=55 :: SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8)) :: DepsSize=1 [ 14 ]
IDX=56 :: SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8)) :: DepsSize=1 [ 2 ]
IDX=57 :: Add[0x22f00f0]::(SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8))) + (SExt[0x22e5710, isConcrete=true]::(bits=32, Read[0x229c570, isConcrete=true]::(index=13, bits=8))) :: DepsSize=2 [ 18 19 ]
IDX=58 :: Constant[0x22f0870]::(value=0x67, bits=32) :: DepsSize=0 [ ]
IDX=59 :: Add[0x22f2070]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x22351d0, isConcrete=true]::(bits=32, Read[0x2242d80, isConcrete=true]::(index=3, bits=8))) :: DepsSize=2 [ 2 3 ]
IDX=60 :: Add[0x22f29b0]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x22b8a40, isConcrete=true]::(bits=32, Read[0x2243260, isConcrete=true]::(index=6, bits=8))) :: DepsSize=2 [ 5 6 ]
IDX=61 :: Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8))) :: DepsSize=2 [ 11 24 ]
IDX=62 :: Add[0x22fcf40]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22a69d0, isConcrete=true]::(bits=32, Read[0x229c400, isConcrete=true]::(index=12, bits=8))) :: DepsSize=2 [ 15 18 ]
IDX=63 :: Constant[0x22fd890]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=64 :: Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) :: DepsSize=2 [ 2 4 ]
IDX=65 :: SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8)) :: DepsSize=1 [ 15 ]
IDX=66 :: Equal[0x2310e30, isConcrete=false]::(Constant[0x23a6240]::(value=0x58, bits=32), Add[0x22f70e0]::(SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8))) + (SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8)))) :: DepsSize=2 [ 11 24 ]
IDX=67 :: Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8))) :: DepsSize=2 [ 14 15 ]
IDX=68 :: Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8))) :: DepsSize=2 [ 5 9 ]
IDX=69 :: Constant[0x2327b20]::(value=0x62, bits=32) :: DepsSize=0 [ ]
IDX=70 :: Equal[0x232c7a0, isConcrete=false]::(Constant[0x2370120]::(value=0x52, bits=32), Add[0x22aa2c0]::(SExt[0x22b8990, isConcrete=true]::(bits=32, Read[0x22433d0, isConcrete=true]::(index=7, bits=8))) + (SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8)))) :: DepsSize=2 [ 5 7 ]
IDX=71 :: Equal[0x2334f60, isConcrete=false]::(Constant[0x22a7cb0]::(value=0x58, bits=32), Add[0x231d610]::(SExt[0x229d830, isConcrete=false]::(bits=32, Read[0x22430f0, isConcrete=false]::(index=5, bits=8))) + (SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8)))) :: DepsSize=2 [ 5 9 ]
IDX=72 :: SExt[0x234f860, isConcrete=false]::(bits=32, Read[0x229cca0, isConcrete=false]::(index=18, bits=8)) :: DepsSize=1 [ 24 ]
IDX=73 :: SExt[0x234f910, isConcrete=false]::(bits=32, Read[0x229b9f0, isConcrete=false]::(index=b, bits=8)) :: DepsSize=1 [ 11 ]
IDX=74 :: SExt[0x234f9c0, isConcrete=false]::(bits=32, Read[0x229b740, isConcrete=false]::(index=9, bits=8)) :: DepsSize=1 [ 9 ]
IDX=75 :: Equal[0x2354070, isConcrete=false]::(Constant[0x22f0870]::(value=0x67, bits=32), Add[0x23171d0]::(SExt[0x230c110, isConcrete=false]::(bits=32, Read[0x229bfb0, isConcrete=false]::(index=f, bits=8))) + (SExt[0x22e5a80, isConcrete=false]::(bits=32, Read[0x229be40, isConcrete=false]::(index=e, bits=8)))) :: DepsSize=2 [ 14 15 ]
IDX=76 :: Constant[0x2370120]::(value=0x52, bits=32) :: DepsSize=0 [ ]
IDX=77 :: Equal[0x23701e0, isConcrete=true]::(Constant[0x22fd890]::(value=0x58, bits=32), Add[0x230b590]::(SExt[0x22ed760, isConcrete=true]::(bits=32, Read[0x2242c80, isConcrete=true]::(index=2, bits=8))) + (SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8)))) :: DepsSize=2 [ 2 4 ]
IDX=78 :: Constant[0x23a6240]::(value=0x58, bits=32) :: DepsSize=0 [ ]
IDX=79 :: Equal[0x23a69a0, isConcrete=false]::(Constant[0x22ad410]::(value=0x58, bits=32), Add[0x22df870]::(SExt[0x2234b10, isConcrete=true]::(bits=32, Read[0x2242f80, isConcrete=true]::(index=4, bits=8))) + (SExt[0x22af450, isConcrete=false]::(bits=32, Read[0x229b600, isConcrete=false]::(index=8, bits=8)))) :: DepsSize=2 [ 4 8 ]
===================== ALLOCATED EXPRESSIONS STATS =====================

Writing 4 bytes to address 0x7ffd072e64bc
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
Reading 4 bytes from address 0x7ffd072e64bc
Known regions:
  0x7ffd072e5000 shadowed by 0x22935e0
